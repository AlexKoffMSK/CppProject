#include <iostream>
#include <cmath>
#include <ctime> // Для time(0)
#include <iomanip> // для setw - выравнивание вывода
#include <cassert>

#include "Cards/card_lessons_and_homework.h"
#include "Cards/game_21.h"
#include "functions.h"
#include "sorts.h"
#include "2d_arrays.h"

#include "ConsoleHelper.h"
#include "ConsoleTasks.h"

#include "Classwork.h"
#include "Structures.h"

#include "Matrix.h"

#include "DynamicArray.h"

using namespace std;

#pragma region Homework

#pragma region Homework_0

void Homework_0_1()
//1.Пользователь вводит число. Выести even - если число четное и odd - если не четное.
{
	int a = 0;

	cout << "Введите любое число: ";
	cin >> a;

	if (a % 2 == 0)
	{
		cout << a << " - Четное" << endl;
	}
	else
	{
		cout << a << " - Нечетное" << endl;
	}
}// codereview - замечания, предложения: проще делать через переменную а

void Homework_0_2()
//2.Пользователь вводит число, вывести сколько единиц содержится в этом числе (последняя цифра).
//Input: 64632. Output : 2
{
	int a = 0;

	cout << "Введите любое число: ";
	cin >> a;

	cout << "Последняя цифра числа: " << a % 10 << endl;
}// codereview - замечания, предложения: в cout можно сразу записывать арифметические выражения

void Homework_0_2_1()
//2 * .Тоже самое, но вывести сколько десятков(предпоследняя цифра).
//Input: 64632. Output : 3
{
	int a = 0;

	cout << "Введите любое число: ";
	cin >> a;
	//b = a % 100;
	//c = b / 10;
	cout << "Предпоследняя цифра числа: " << (a % 100) / 10 << endl;
}// codereview - замечания, предложения: аналогично

void Homework_0_3()
//3. Пользователь вводит 4 числа.Вывести максимальное число.Не разрешается использовать вложенные ифы и операции && || .
//Подсказка: не обязательно делать все проверки только после того как пользователь введет все числ
{
	int a = 0; //задается число
	int b = 0; //задается число
	int c = 0; //задается число
	int d = 0; //задается число
	int e = 0; //присваивается результат по-парного сравнения первой пары чисел
	int f = 0; //присваивается результат по-парного сравнения второй пары чисел

	cout << "Введите любое число a: ";
	cin >> a;

	//int max = a;

	cout << "Введите любое число b: ";
	cin >> b;

	//if (b > max)
	//{
	//	max = b;
	//}

	cout << "Введите любое число c: ";
	cin >> c;

	//if (c > max)
	//{
	//	max = c;
	//}

	cout << "Введите любое число d: ";
	cin >> d;

	//if (d > max)
	//{
	//	max = d;
	//}



	if (a > b)
	{
		e = a;
	}
	else
	{
		e = b;
	}

	if (c > d)
	{
		f = c;
	}
	else
	{
		f = d;
	}

	if (e > f)
	{
		cout << "Максимальное число из заданных: " << e << endl;
	}
	else
	{
		cout << "Максимальное число из заданных: " << f << endl;
	}

}// codereview - замечания, предложения: можно сделать через перепроверку максимальности заданного числа

void Homework_0_4()
//4. Пользователь вводит 2 числа.Вывести их в порядке возрастания.
//Input: 6 3. Output : 3 6
{
	int a = 0;
	int b = 0;

	cout << "Введите любое число: ";
	cin >> a;
	cout << "Введите любое число: ";
	cin >> b;

	if (a > b)
	{
		cout << b << ' ' << a << endl;
	}
	else
	{
		cout << a << ' ' << b << endl;
	}
}// codereview - замечания, предложения:

void Homework_0_5()
//5. Пользователь вводит 3 числа.Вывести их в порядке возрастания.
//Input: 6 3 7. Output : 3 6 7
{
	int a = 0; //6
	int b = 0; //3
	int c = 0; //7
	int Min = 0;
	int Mid = 0;
	int Max = 0;

	cout << "Введите любое число: ";
	cin >> a;
	cout << "Введите любое число: ";
	cin >> b;
	cout << "Введите любое число: ";
	cin >> c;

	// 8 8 4
	// 8 8 4
	// 8 4 8 // принцип пузырьковой сортировки, т.к. всплывает самое большое число
	// 4 8 8

	// 2 8 4
	// 2 8 4
	// 2 4 8
	// 2 4 8

	// 2 3 8
	// 2 3 8
	// 2 3 8
	// 2 3 8

	// 3 6 4 
	// 3 6 4
	// 3 4 6
	// 3 4 6

	// 4 7 1
	// 4 7 1
	// 4 1 7
	// 1 4 7


	//if (a > b)
	//{
	//	int temp = a; // через временную переменную, которая живет только в одном цикле temp
	//	a = b; 
	//	b = temp;
	//	swap(a, b);
	//}
	//if (b > c)
	//{
	//	int temp = b;
	//	b = c;
	//	c = temp;
	//}
	//if (a > b)
	//{
	//	int temp = a;
	//	a = b;
	//	b = temp;
	//}


	// для случаев, когда а - максимальное
	if (a >= b && a >= c && b >= c)
	{
		Min = c;
		Mid = b;
		Max = a;
	}
	else if (a >= b && a >= c && c >= b)
	{
		Max = a;
		Mid = c;
		Min = b;
	}
	// для случаев, когда b - максимальное
	else if (b >= a && b >= c && a >= c)
	{
		Max = b;
		Mid = a;
		Min = c;
	}
	else if (b >= a && b >= c && c >= a)
	{
		Max = b;
		Mid = c;
		Min = a;
	}
	// для случаев, когда c - максимальное
	else if (c >= a && c >= b && a >= b)
	{
		Max = c;
		Mid = a;
		Min = b;
	}
	else if (c >= a && c >= b && b >= a)
	{
		Max = c;
		Mid = b;
		Min = a;
	}

	cout << Min << Mid << Max << endl;
}// codereview - замечания, предложения:

void Homework_0_6()
//6. Пользователь вводит a,b,c - найти корни квадратного уравнения. ax^2 + bx + c = 0.
{
	int a = 0; // коэффициент a
	int b = 0; // коэффициент b
	int c = 0; // коэффициент c


	cout << "Введите число a: ";
	cin >> a;

	cout << "Введите число b: ";
	cin >> b;

	cout << "Введите число c: ";
	cin >> c;

	int D = b * b - 4 * a * c; // дискриминант
	cout << "Дискриминант равен: " << D << endl;

	// если дискриминант больше нуля, то решений 2, 
	// если дискриминант равен нулю, то корень только один, 
	// если дискриминант меньше нуля, то корней нет

	if (D > 0)
	{
		const double sqrt_d = sqrt(D);
		cout << "Первый корень равен: " << (-b + sqrt_d) / (a * 2) << endl;
		cout << "Второй корень равен: " << (-b - sqrt_d) / (a * 2) << endl;
	}
	else if (D == 0)
	{
		cout << "Единственный корень равен: " << -b / (2 * a) << endl;
	}
	else if (D < 0)
	{
		cout << "Не имеет решений" << endl;
	}
}// codereview - замечания, предложения: перенос выражений в cout оптимизирует длину кода

void Homework_0_7()
//7. Программа загадывает случаное число в диапазоне от 0 до 7.
//Пользователю предлагается угадать его.Т.е.пользователь вводит число.
//Если введенное число совпало с загаданным, вывести win и закончить программу.
//Если не совпало, то вывести на экран сообщение "Ваше число больше загаданного" или "Ваше число меньше загаданного".
//И предложить еще раз ввести число пользователю.Если угадает win, если не угадает lose.
{
	//int a = 4;
	//int b = 3;
	//int c;
	//
	//if (a > b)
	//{
	//	c = a;
	//}
	//else
	//{
	//	c = b;
	//}

	//std::cout << ((a > b) ? (a) : (b)) << std::endl;
	//std::cout << (a) << std::endl;
	//std::cout << (b) << std::endl;

	//(a > b) ? (c = a) : (c = b);
	//c = a;
	//c = b;
	// тернарный оператор ? : - работает: ? - если выражение левее дает истину, то следующее выражение - действие при истине
	// если оно ложно, то выполняется выражение после двоеточия. термир - превращается

	//(a > b) ? (c = a) : (c = b);
	//c = ((a > b) ? a : b); //  в переменную c засунуть а или b если - что больше

	int random_num = rand() % 8;
	cout << random_num << endl;

	int user_num = 0;
	cout << "Введите число a: ";
	cin >> user_num;

	if (user_num == random_num) // проверяем по логике - пользователь ввел число соответствующее рандомному или нет?
	{
		cout << "Win";
		return;
	}

	//if (user_num > random_num)
	//{
	//	cout << "Ваше число больше заданного" << endl;
	//}
	//else
	//{
	//	cout << "Ваше число меньше заданного" << endl;
	//}

	cout << "Ваше число" << (user_num > random_num ? "больше" : "меньше") << " заданного" << endl;

	cout << "Повторно введите число a: ";
	cin >> user_num;
	cout << (user_num == random_num ? "Win" : "Lose") << endl;
}// codereview - замечания, предложения:

void Homework_0_8()
//8. Пользователь вводит 3 числа y, m, d.Которые обозначают год, месяц и день.Вывести на экран вчерашний день.
//Для упрощения считаем, что високосных годов не бывает и в феврале всегда 28 дней.
//Input: 2020 3 1. Output : 2020 2 28/29
{
	int y = 0;
	int yv = 0; //флаг високосности года для 29 февраля
	//int yn = 0; // переменная для year new после отсчёта от стартовой даты (если захочется по-играться с количеством дней более 365/366)

	int m = 0; // стартовый месяц вводится с рук
	int mn = 0; // переменная для month new после отсчёта от стартовой даты

	int m1 = 31; // количество дней в первом месяце и т.д.
	int m2 = 28;
	int m2_2 = 29;
	int m3 = 31;
	int m4 = 30;
	int m5 = 31;
	int m6 = 30;
	int m7 = 31;
	int m8 = 31;
	int m9 = 30;
	int m10 = 31;
	int m11 = 30;
	int m12 = 31;

	int d = 0; // стартовый день
	int db = 0; // переменная days before заданной даты
	int dn = 0; // переменная day new после отсчёта от стартовой даты
	int dim = 0; // days in month для подстановки в результат

	cout << "Введите год: " << endl;
	cin >> y;
	cout << "Введите месяц: " << endl;
	cin >> m;
	cout << "Введите день: " << endl;
	cin >> d;
	cout << "Заданная дата: " << y << '-' << m << '-' << d << endl;

	cout << "Количество дней от текущей даты до искомой даты (отсчёт назад, включая текущую дату): ";
	cin >> db;

	if ((y % 4) == 0)
	{
		yv = 1;
		// cout << "Год високосный" << endl;
	}
	//else
	//{
		//	cout << "Год невисокосный" << endl;
	//}
	//cout << yv << endl;

	if (m == 1) { dim = m12; } // присвоение переменной dim количества дней в месяце, предыдущем введенному
	if (m == 2) { dim = m1; }
	if (m == 3 && yv == 0) { dim = m2; }
	if (m == 3 && yv == 1) { dim = m2_2; }
	if (m == 4) { dim = m3; }
	if (m == 5) { dim = m4; }
	if (m == 6) { dim = m5; }
	if (m == 7) { dim = m6; }
	if (m == 8) { dim = m7; }
	if (m == 9) { dim = m8; }
	if (m == 10) { dim = m9; }
	if (m == 11) { dim = m10; }
	if (m == 12) { dim = m11; }

	//cout << dim << endl;

	cout << "Дата, бывшая за " << db << " д. до текущей даты (включая текущую дату): " << endl;

	if ((d - db) > 0)
	{
		mn = m;
		dn = (d - db + 1);
	}
	if ((d - db) == 0)
	{
		mn = m - 1;
		dn = dim + 1;
	}
	if ((d - db) < 0)
	{
		mn = m - 1;
		dn = dim - abs(d - db) + 1;
	}

	cout << y << '-' << mn << '-' << dn << endl;

}// codereview - замечания, предложения:

void Homework_0_8_OneDay()
{
	int y = 0;
	int m = 0;
	int d = 0;

	// 2020 3 6 - 2020 3 5
	// 2020 4 1 - 2020 3 31
	// 2020 1 1 - 2019 12 31
	cin >> y >> m >> d;

	if (d - 1 > 0)
	{
		cout << y << m << d - 1 << endl;
		return;
	}
	// в обратном случае минус день назад всегда равен 0-последнему дню предыдущего месяца

	// 31 28 31 30 31 30 31 31 30 31 30 31
	if (m == 1)
	{
		cout << y - 1 << 12 << 31 << endl;
	}
	else if (m == 3)
	{
		cout << y << m - 1 << 28 << endl;
	}
	else if (m == 5 || m == 7 || m == 10 || m == 12)
	{
		cout << y << m - 1 << 30 << endl;
	}
	else
	{
		cout << y << m - 1 << 31 << endl;
	}
}

void Homework_0_9()
//1.Пользователь вводит пятизначное число. Вывести 1, если это число - палиндром, иначе 0.
{
	int a = 0;
	cout << "Введите любое пятизначное число: ";
	cin >> a;

	const int a5 = (a % 100000) / 10000; // ставить const всегда, когда не собираешься менять значение переменной
	const int a4 = (a % 10000) / 1000;
	const int a3 = (a % 1000) / 100;
	const int a2 = (a % 100) / 10;
	const int a1 = (a % 10) / 1;

	cout << a5 << endl;
	cout << a4 << endl;
	cout << a3 << endl;
	cout << a2 << endl;
	cout << a1 << endl;

	if (a5 == a1 && a4 == a2)
	{
		cout << "true" << endl;
	}
	else
	{
		cout << "false" << endl;
	}

	cout << ((a5 == a1 && a4 == a2) ? "true" : "false") << endl; // при использовании тернарного оператора - все выражение брать в скобки
	//cout << (a5 == a1 && a4 == a2) << endl; // при использовании тернарного оператора - все выражение брать в скобки
}// codereview - замечания, предложения:

void Homework_0_10()
//1.Пользователь вводит шестизначное число. Вывести тру, если это число - счастливый билет.
{
	int a = 0;
	cout << "Введите любое шестизначное число: ";
	cin >> a;

	int a6 = a % 10;
	int a5 = (a % 100) / 10;
	int a4 = (a % 1000) / 100;
	int a3 = (a % 10000) / 1000;
	int a2 = (a % 100000) / 10000;
	int a1 = (a % 1000000) / 100000;

	if ((a6 + a5 + a4) == (a3 + a2 + a1))
	{
		cout << "true" << endl;
	}
	else
	{
		cout << "false" << endl;
	}

}// codereview - замечания, предложения:

void Homework_0_11()
//1.Пользователь вводит четырёхзначное число. Сформировать переменную, в которой будет записано это число в отзеркаленном виде. Например из числа 1234 сделать 4321.
{
	int a = 0;
	cout << "Введите любое четырёхзначное число: ";
	cin >> a;

	int a1 = 0; //1
	int a2 = 0; //2
	int a3 = 0; //3
	int a4 = 0; //4

	a4 = (a % 10);
	a3 = (a % 100) / 10;
	a2 = (a % 1000) / 100;
	a1 = (a % 10000) / 1000;

	const int reverse_a = (1000 * a4) + (100 * a3) + (10 * a2) + a1;
	cout << reverse_a << endl;

}// codereview - замечания, предложения:

#pragma endregion

 // ========================================================================= //

#pragma region Classwork_1
void Classwork_1_0()
{
	//int a = 4;
	//
	//int b = a++; //  b = 4, a = 5
	//int b = ++a; //  b = 5, a = 5

	//c = 3 * 4 - a++ * 6;
	//
	//c = 3 * 4 - a * 6;
	//a = a + 1;
	//
	//c = 3 * 4 - ++a * 6;
	//
	//a = a + 1;
	//c = 3 * 4 - a * 6;

	//cout << "Hello" << endl;
	//
	//for (int i = 0; i < 10; i++)
	//{
	//	cout << "Hello" << endl;
	//}

	// i = 0;
	// i < 10; 0 < 10 cout << "Hello" << endl;
	// i++; i = 1
	// i < 10; 1 < 10 cout << "Hello" << endl;

	// 0 1 2 3 4 5 6 7
	//for (int i = 0; i < 8; i++)
	//{
	//	cout << i << ' ';
	//}
	//cout << endl;


	// 7 6 5 4 3 2 1 0
	//for (int i = 7; i >= 0; i--)
	//{
	//	cout << i << ' ';
	//}
	//cout << endl;

	// 0 2 4 6 8 10
	//for (int i = 0; i <= 10; i+=2)
	//{
	//	cout << i << ' ';
	//}

	//	for (int i = 10; i > 0; i/=2)
	//	{
	//		cout << i << ' ';
	//	}
	//
	//cout << endl;


	// Пользорватель 2 числа start, end, step. start & end входят в вывод
	//int start = 0;
	//int end = 0;
	//int step = 0;
	//
	//cin >> start >> end >> step;

	//if (step > 1 && start > end)
	//{
	//	return;
	//}
	//if (step < 1 && start < end)
	//{
	//	return;
	//}
	//
	//for (int i = start; i <= end; i += step)
	//{
	//	cout << i << ' ';
	//}
	//cout << endl;
	//3 4 -1

	// 0 1 2 3 4 5 10 9 8 7 6
	//for (int i = 0; i <= 5; i++)
	//{
	//	cout << i << ' ';
	//}
	//for (int j = 10; j >= 6; j--) //можно использовать снова i потому что он освободился
	//{
	//	cout << j << ' ';
	//}
	//cout << endl;

	// 2 4 8 16 32 64 ... 2^32
	// 2^1 2^2
	// pow(2,...)
	// 2^1 - 2
	// 2^2 - 4
	// 2^3 - 8

	//for (int i = 1; i < 32; i++)
	//{
	//	int a = pow(2, i); // если добавить unsigned - не будет отрицательного значения
	//	cout << "2^" << i << " = " << a << endl;
	//}

	//for (int i = 1; i < pow(2,30); i*=2)
	//{
	//	int a = 2 * i; 
	//	cout << a << endl;
	//}

	// 0, 1000. Которые делятся на 3 и на 5

	// 0 % 3 = 0
	// 1 / 3 = 0
	// 1 % 3 = 1
	// 2 % 3 = 2
	// 3 % 3 = 0
	// 4 % 3 = 1

	//for (int i = 0; i <= 1000; i++)
	//{
	//	if (i % 3 == 0 && i % 5 == 0)
	//	{
	//		cout << i << endl;
	//	}
	//}

	// 1, 1000. Вместо четныъ писать *, вместо нечетных писать само число
	// 1 * 3 * 5 * 7 ...
	//for (int i = 0; i <= 1000; i++) //пробегая от 0 до 1000 с шагом +1
	//{
	//	if (i % 2 == 0) // если i - четное
	//	{
	//		cout << '*' << endl;
	//	}
	//	else
	//	{
	//		cout << i << endl;
	//	}
	//}

	// 0 1 2 3 4 5 0 0 0 0 0 11 12 13 14 15. Но разрешается испольщовать только один for
	//for (int i = 0; i <= 15; i++) //пробегая от 0 до 10 с шагом +1
	//{
	//	if (i <=5 || i > 10) // если i меньше или равно 5 ИЛИ больше 10
	//	{
	//		cout << i << endl;
	//	}
	//	else
	//	{
	//		cout << '0' << endl;
	//	}
	//}

	// 0 1 2 3 4 5 11 12 13 14 15. Но разрешается испольщовать только один for
	//for (int i = 0; i <= 15; i++) //пробегая от 0 до 10 с шагом +1
	//{
	//	if (i <= 5 || i > 10) // если i меньше или равно 5 ИЛИ больше 10 игнрируя числа от 6 до 10
	//	{
	//		cout << i << endl;
	//	}
	//}

	//int a = 7;
	// Вывести его на экран, если оно составное (не простое)
	// Простое число - это число которе делится ТОЛЬКО на 1 и на себя. 5 7 11 13 17 ...
	// Составное - все остальные
	// если остаток от деления на интервал % (от 2 до (b<=a)) i++ - дает что-то %

	// 9
	// [2,8]
	// 9 % 2 == 1
	// 9 % 3 == 0 !!!! Составное, дальше ничего проверять не нужно. Задача выполнена

	// 7
	// [2,6]
	// 15 % 2 == 1
	// 15 % 3 == 1
	// 15 % 4 == 3
	// 15 % 5 == 2
	// 15 % 6 == 1

	// Нашлось такое число, на котороые а поделилось без остатка
	// 2, a-1

	// 7
	// 7 / 1 = 7, 7 % 1 = 0
	// 7 / 2 = 3, 7 % 2 = 1
	// 7 / 3 = 2, 7 % 3 = 1
	// 7 / 4 = 1, 7 % 4 = 3
	// ...
	// 7 / 7 = 1, 7 % 7 = 0

	//int a = 7;
	//int b = 0;
	//int c = 0;
	//
	//for (int i = 1; i < a; i++)
	//{
	//	c = a / i;
	//	b = a % i;
	//	cout << a << " / " << i << " = " << c << ',' << a << " % " << i << " = " << b << endl;
	//}

	//nt a = 0;
	//nt b = 0;
	//nt c = 0;
	//
	//in >> a;
	//
	//// [2,a-1]
	//or (int i = 2; i < a; i++) //  в этом диапазоне ищем число, при взятии остатка от которого получаем 0
	//
	//	b = a % i;
	//	if (b == 0)
	//	{
	//		cout << a << " % " << i << " = " << b << endl;
	//		cout << a << endl;
	//		break; // остановится на первом попавшем в условие значении
	//	}
	//

	// Пользователь вводит 2 числа a,b
	// Вывести все чсисла между ними

	// 5 2
	// 2 3 4 5

	// 2 5
	// 2 3 4 5

	//int a = 0;
	//int b = 0;
	//cin >> a >> b;
	//if (b > a)
	//{
	//	for (int i = a; i <= b; i++)
	//	{
	//		cout << i << endl;
	//	}
	//}
	//else
	//{
	//	// a >= b
	//	for (int i = a; i >= b; i--)
	//	{
	//		cout << i << endl;
	//	}
	//}

	//int a = 0; //7
	//int b = 0; //2
	//cin >> a >> b;
	//if (a > b)
	//{
	//	swap(a, b);
	//}
	//for (int i = a; i <= b; i++)
	//{
	//	cout << i << endl;
	//}

	// 0 1 2 3 4 5 10 9 8 7 6. Но разрешается испольщовать только один for
	// 0 1 2 3 4 5 0 0 0 0 0. Но разрешается испольщовать только один for

	//	for (int i = 0; i <= 10; i++)
	//	{
	//		if (i > 5)
	//		{
	//			// 6  7 8 9 10
	//			// 10 9 8 7  6
	//			// 6 + 4 = 10
	//			// 16 - 6 = 10
	//			// 16 - 7 = 9
	//			// 16 - 8 = 8
	//			// 16 - 9 = 7
	//			cout << (16 - i) << ' ';
	//		}
	//		else
	//		{
	//			cout << i << ' ';
	//		}
	//	}
	//
	//	cout << endl;

	// Пользователь вводит число n и числа a,b. 
	// Вывести все числа, которые > 0 и < n. 
	// И при этом делятся без остатка и на a и на b.
	// Например: = 16 3 5. Вывод : 5 15

	int n = 0; //16
	int a = 0; //5
	int b = 0; //3
	cin >> n >> a >> b;

	for (int i = 1; i < n; i++)
	{
		if (i % a == 0 || i % b == 0) // внутри условия должно быть логическое выражение!
		{
			cout << i << endl;
		}
	}
}
#pragma endregion

// ========================================================================= //

#pragma region Homework_1
void Homework_1_1()
{
	//Начнем пока с такого :
	//1. Пользователь вводит число N.Вывести все числа, которые > 0 и < N и при этом у них последняя цифра 8 или 9.
	//	Например: 100
	//	Вывод : 8 9 18 19 28 29 38 39 48 49 58 59 68 69 78 79 88 89 98 99

	int n = 0;
	cout << "Введите число n: ";
	cin >> n;
	for (int i = 1; i < n; i++)
	{
		if (i % 10 == 8 || i % 10 == 9)
		{
			cout << i << endl;
		}
	}
}

void Homework_1_2()
//2. Пользователь вводит число N.Вывести на экран число и его квадрат для чисел из[1, n].
//	1 - 1
//	2 - 4
//	3 - 9
//	4 - 16
//	...
//	n - n * n
{
	int n = 0;
	cout << "Введите число n: ";
	cin >> n;
	for (int i = 1; i <= n; i++)
	{
		cout << i << " - " << pow(i, 2) << endl;
	}
}

void Homework_1_3()
//3. Все тоже самое как и во 2ой задаче, только выводить только для четных чисел.
//	2 - 4
//	4 - 16
//	6 - 36
//	...
{
	int n = 0;
	cout << "Введите число n: ";
	cin >> n;
	for (int i = 1; i <= n; i++)
	{
		if (i % 2 == 0)
		{
			cout << i << " - " << pow(i, 2) << endl;
		}
	}

}

void Homework_1_4()
//4.  Пользователь вводит число N.Вывести следующее :
//0 1 -1 2 -2 3 -3 4 -4 ... N -N
{
	int n = 0;
	cout << "Введите число n: ";
	cin >> n;
	cout << 0 << ' ';
	for (int i = 1; i <= n; i++)
	{
		cout << i << ' ' << -i << ' ';
	}

}

void Homework_1_5()
//5.  Пользователь вводит число N.Вывести на экран N зведочек.
//	Например: 5. Вывод : **
{
	int n = 0;
	cout << "Введите число n: ";
	cin >> n;

	for (int i = 1; i <= n; i++)
	{
		cout << '*';
	}
}

void Homework_1_6()
//6. Пользователь вводит число N.Вывести на экран N зведочек.А на следующей сторке N / 2 звездочек, причем в таком формате :
//для N == 10
//        ****
//             ***
{
	int n = 0;
	cout << "Введите число n: ";
	cin >> n;
	for (int i = 1; i <= n; i++)
	{
		cout << '*';
	}
	cout << endl; //вклиниваемся в работу цикла, но до этого прерывания сплошного вывода надо было прям допереть, но я дошел методом научного тыка!
	for (int i = 1; i <= n / 2; i++)
	{
		cout << ' ';
	}
	for (int i = 1; i <= n / 2; i++)
	{
		cout << '*';
	}
}

void Homework_1_7()
//7.  Пользователь вводит число N.Сначала вывести N палочек '|'.Потом N / 2 решеток '#'.Потом N / 3 звездочек ''.
//	Вторую строку заполнить '!', чтоб длины у строк совпадали.
//	Например: 10
//
//	||||||||||##### * *
//	!!!!!!!!!!!!!!!!!!
{
	int n = 0;
	cout << "Введите число n: ";
	cin >> n;
	for (int i = 1; i <= n; i++)
	{
		cout << '|';
	}
	for (int i = 1; i <= n / 2; i++)
	{
		cout << '#';
	}
	for (int i = 1; i <= n / 3; i++)
	{
		cout << '*';
	}
	cout << endl;
	int SummaSimvolov = n + n / 2 + n / 3;
	for (int i = 1; i <= SummaSimvolov; i++)
	{
		cout << '!';
	}
}

void Homework_1_8_1()
//Давай попробуем такого рода задачки :
//
//Пользователь вводит число N.Далее попросить пользователя ввести еще N чисел.
//Пример : 6   7 3 2 3 4 5     0
//Пример : 6   7 3 0 3 0 5     2
//1. Вывести true, если среди чисел есть 0. Иначе false.
// 2. Вывести количество нулей в последжовательности.
{
	int n = 0;
	int a = 0;
	int zero_count = 0;
	bool is_zero_exist = false;
	cout << "Введите число n: ";
	cin >> n;

	for (int i = 0; i < n; i++) //пробежался по циклу от 1 до количества n путем возрастания
	{
		cout << "Введите " << i << " элемент" << endl;
		cin >> a;

		if (a == 0)
		{
			zero_count++;
			is_zero_exist = true;
		}

		//is_zero_exist = (a == 0);
	}

	cout << zero_count << endl;

	if (is_zero_exist == true)
	{
		std::cout << "false" << std::endl;
	}
	else
	{
		std::cout << "true" << std::endl;
	}
}

// 6   7 3 2 3 4 5
// true / false

void Homework_1_8_2()
//Давай попробуем такого рода задачки :
//
//Пользователь вводит число N.Далее попросить пользователя ввести еще N чисел.
//Пример : 6   7 3 2 3 4 5
//
//2. Вывести сумму чисел.
{
	int n = 0;
	int a = 0;
	int d = 0;

	cout << "Введите число n: ";
	cin >> n;

	for (int i = 0; i < n; i++) //пробежался по циклу от 1 до количества n путем возрастания
	{
		cout << "Введите " << i << " элемент" << endl;
		cin >> a;
		d += a;
	}
	cout << d << endl;
}

void Homework_1_8_3()
//Давай попробуем такого рода задачки :
//
//Пользователь вводит число N.Далее попросить пользователя ввести еще N чисел.
//Пример : 6   7 3 2 3 4 5
//
//3. Вывести '!' как только пользователь ввел третье число(N гарантированно больше трех).
{
	int n = 0;
	int a = 0;

	cout << "Введите число n: ";
	cin >> n;

	for (int i = 0; i < n; i++) //пробежался по циклу от 1 до количества n путем возрастания
	{
		cout << "Введите " << i << " элемент" << endl;
		cin >> a;
		if (i == 2)
		{
			cout << '!' << endl;
		}
	}
}

void Homework_1_8_4()
//Давай попробуем такого рода задачки :
//
//Пользователь вводит число N.Далее попросить пользователя ввести еще N чисел.
//Пример : 6   7 3 2 3 4 5

//
//4. Вывести '!' как только пользователь ввел предпоследнее введенное число. Не используя переменную i
{
	int n = 0;
	int a = 0;
	int d = 0;
	int e = 0;

	cout << "Введите число n: ";
	cin >> n;

	for (int i = 0; i < n; i++) //пробежался по циклу от 1 до количества n путем возрастания
	{
		cout << "Введите " << i << " элемент" << endl;
		d = a;
		cin >> a;
	}
	cout << d << endl;
}

void Homework_1_8_5()
//Давай попробуем такого рода задачки :
//
//Пользователь вводит число N.Далее попросить пользователя ввести еще N чисел.
//Пример : 6   7 3 2 3 4 5
//
//5. Вывести максимальное из чисел. -1 -2 -3 -4
{
	int n = 0;
	int a = 0;
	//int max = numeric_limits<int>::min(); //самое маленькое интовое число

	cout << "Введите число n: ";
	cin >> n;

	cin >> a;
	int max = a;

	for (int i = 1; i < n; i++) //пробежался по циклу от 1 до количества n путем возрастания
	{
		cout << "Введите " << i << " элемент" << endl;
		cin >> a;

		if (a > max)
		{
			max = a;
		}

		//d = (a > d) ? a : e)
		//c = ((a > b) ? a : b); //  в переменную c засунуть а или b если - что больше
	}
	cout << "Максимальное число из введенных (d) = " << max << endl;
}

void Homework_1_8_6()
//Давай попробуем такого рода задачки :
//
//Пользователь вводит число N.Далее попросить пользователя ввести еще N чисел.
//Пример : 6   7 3 3 1 4 4
//
//6. Вывести true, если среди чисел есть 2 подрят идущих одинаковых числа.Иначе false.

{
	int n = 0;
	int a = 0;
	int d = rand(); //чтобы исключить первое случайное совпадение с нулевым значением, введенным пользователем
	int e = 0;
	bool b = false;

	cout << "Введите число n: ";
	cin >> n;

	// 4   1 2 2 4

	for (int i = 1; i <= n; i++) //пробежался по циклу от 1 до количества n путем возрастания
	{
		cout << "Введите " << i << " элемент" << endl;

		d = a; // приравниваем d к a именно после сравнения чтобы запомнить предыдущее значение ввода
		cin >> a;

		if (i > 1)
		{
			if (a == d)
			{
				b = true;
			}
			//b = (a == d) ? true : false;
		}
		cout << "d = " << d << endl;
	}

	cout << b << endl;

}

void Homework_1_8_7()
//Давай попробуем такого рода задачки :
//
//Пользователь вводит число N.Далее попросить пользователя ввести еще N чисел.
//Пример : 6   7 3 2 3 4 5
//
//7. Вывести true, если среди чисел есть 3 подрят идущих одинаковых числа.Иначе false.

{
	int n = 0;
	int a = 0;
	int d = rand(); //чтобы исключить первое случайное совпадение с нулевым значением
	int e = rand(); //чтобы исключить первое случайное совпадение с нулевым значением

	cout << "Введите число n: ";
	cin >> n;

	// 1 2 3 4 5
   // 2 3 4
   // 3 4 5

	cin >> e;
	cin >> d;

	for (int i = 3; i <= n; i++) //пробежался по циклу от 1 до количества n путем возрастания
	{
		cout << "Введите " << i << " элемент: ";
		cin >> a;

		// a = 3. d = 2. e = 1
		if (a == d && a == e)
		{
			cout << "True" << endl;
		}

		// a = 4. d = 3. e = 2
		e = d;
		d = a;

		cout << "d = " << d << endl;
		cout << "e = " << e << endl;

		//c = ((a > b) ? a : b); //  в переменную c засунуть а или b если - что больше
	}
}

void Homework_1_8_8()
//Давай попробуем такого рода задачки :
//
//Пользователь вводит число N.Далее попросить пользователя ввести еще N чисел.
//Пример : 6   7 3 2 3 4 5
//8. Вывести true, если среди чисел каждое следующее больше предыдущего.Иначе false.
// 1 2 3 4 5 6
// 1 2 1 4 5 6
{
	int n = 0;
	int a = 0;
	int d = 0;
	int e = 0;
	bool f = false;

	cout << "Введите число n: ";
	cin >> n;
	cin >> a;
	for (int i = 2; i <= n; i++) //пробежался по циклу от 1 до количества n путем возрастания
	{
		cout << "Введите " << i << " элемент: ";

		d = a; // приравниваем d к a именно после сравнения чтобы запомнить предыдущее значение ввода
		cin >> a;

		if (a < d)
		{
			f = true;
		}

		if (a > d)
		{
			e++;
		}
	}

	//if (e == n - 1)

	cout << (f == true ? "Bad" : "Good") << endl;
}

#pragma endregion

// ========================================================================= //

#pragma region Classwork_2

void IsuchaemWhile()
{

	//for (int i = 0; i < 10; i++)
	//{
	//	cout << i;
	//}

	int i = 0;
	while (i < 10)
	{
		cout << i;
		i++;
	}


	do
	{
		cout << i;
		i++;
	} while (i < 10);

	//while (i <= 20)
	//{
	//	cout << i;
	//	i++;
	//}

	// остановиться при условии, что некое число делится и на 1 и на 2 делитель без остатка
	//int i = 0;
	int delitel_1 = 3;
	////int delitel_2 = 5;
	//int a = 0;
	////int b = 0;

	// Стартуем с i = 0
	// Проверяем условие i < 10 (0 < 10). Если false - выходим из цикла. Если true то заходим в тело цикла (идем на следующий шаг)
	// Первый блок до точки с запятой - это стартовое значение для выполнения цикла
	// второй блок до точки с запятой - это условие входа в тело цикла, описанного фигурными скобками ниже
	// третий блок - это действие, которое выполняется после выполнения тела цикла

	//for (i = 0; i < 5 ; i++)
	//{
		// a
	//}

	// i = 0;
	// i < 5 (0 < 5) ? goto следующей строке : end
	// a
	// i++
	// i < 5 (1 < 5) ? goto следующей строке : end
	// a
	// i++
	// i < 5 (2 < 5) ? goto следующей строке : end
	// a
	// i++
	// i < 5 (3 < 5) ? goto следующей строке : end
	// a
	// i++
	// i < 5 (4 < 5) ? goto следующей строке : end
	// a
	// i++
	// i < 5 (5 < 5) ? goto следующей строке : end
	// end:

	//for (i = 0; true; i++)
	//{
	//	if (i % delitel_1 == 0)
	//	{
	//		cout << i << endl;
	//		break;
	//	}
	//}
	//
	//int i = 0;
	//while (i % delitel_1 != 0) //до тех пор пока не делится на 3 увеличиваем счетчик. если условие истинно - заходим в цикл.
	//{
	//i++;
	//}
	//cout << i;
	//
	//
	//int a = 0;
	//while (a != 10) //до тех пор пока a не равно 10
	//{
	//cin >> a;
	//}
	//cout << a;


	//int i = 0;
	//do
	//{
	//cin >> i;
	//} while (i == 10);


	// Вывести первые 10 чисел, которые делятся на 3
	//int i = 0;
	//int a = 0;
	//while (a <= 10) //до тех пор пока не делится на 3 увеличиваем счетчик. если условие истинно - заходим в цикл.
	//{
	//	if (i % delitel_1 == 0)
	//	{
	//		a++;
	//	}
	//	i++;
	//}
	//i % delitel_1 == 0

}

void IsuchaemWhile1()
// for используется для того, чтобы пробежать по изначально известному диапазону
// while используется для того, чтобы пробежать сколько-то заранее неизвестных итераций
{
	//int a = 0;

	/*
	for (;;)
	{
		cin >> a;
		if (a == 0)
		{
			break;
		}
	}

	int i = 0;
	while (i < 10)
	{
		...
		i++;
	}

	for (int i = 0; i < 10; i++)
	{

	}

	while (true)
	{
		cin >> a;
		if (a == 0)
		{
			break;
		}
	}

	do
	{
		cin >> a;
	} while (a != 0);
	*/

	// просим вводить число до тех пор пока не введет 10
	//while (a != 10) // вход в цикл по условию, что ввод не был 10
	//{
	//	cin >> a;
	//}
	//
	//do
	//{
	//	cin >> a;
	//} while (a != 10);

	// компьютер загадывает число в диапазоне от 0 до 20, пользователь вводит число пока не угадает
	// компьютер говорит число введенное больше или меньше загадонного
	//int b = rand() % 21; //выдает случайное число в диапазоне от 0 до 20, включая 20 (через 21) 
	//int b = rand() % 5; //выдает случайное число в диапазоне от 0 до 20, включая 20 (через 21) 
	//int d = 0;
	//do
	//{ 
	//	cin >> a;
	//	d++;
	//
	//	//a = (b > 3) ? 4 : 3; // тернарный оператор в основном используется для того, чтобы исходя из условия что-то присвоить чему-то, а не на проверку логики
	//	if (a > b)
	//	{
	//		cout << "a bolsche zadannogo" << endl;
	//	}
	//	else if (a < b)
	//	{
	//		cout << "a mensche zadannogo" << endl;
	//	}
	//
	//	//if (a != b)
	//	//{
	//	//	cout << "a " << (a < b ? "menshe" : "bolshe") << " zaddannogo" << endl; классический пример использования тернарного оператора
	//	//}
	//
	//} while (a != b);
	//
	//cout << d << endl;
	// для проверки можно использовать бинарный поиск, т.е. из диапазона делим на 2, потом еще на 2 и т.д.

	//1 3 4 7 9 10 12 16 18 20 21 25 27
	//
	//12
	//16 18 20 21 25 27
	//20
	//21 25 27
	//25
	//
	//21
	//
	////1 понять границы диапазона
	////2 
	//
	//22?

	// вводить числа, пока сумма веденных чисел не превысит 30

	int a = 0; // число которое ввел человек
	int summ = 0; //накопление суммы до заданного значения

	do
	{
		cin >> a;
		summ += a;
	} while (summ < 30);

}

#pragma endregion

// ========================================================================= //

#pragma region Homework_2
void Homework_2_1()
//Давай попробуем такого рода задачки :
//Задания на последовательности:
//Пользователь вводит число n. Далее попросить его ввести еще n числел. 
//1. Вывести true, если среди введенных чисел есть число 13.

{
	int n = 0;
	int a = 0;
	int d = 0;
	cout << "Введите число n: ";
	cin >> n;

	for (int i = 1; i <= n; i++)
	{
		cin >> a;
		if (a == 13)
		{
			d = 1; //лучше делать через маркер для будущего соответствия
		}
	}
	if (d == 1)
	{
		cout << "True" << endl;
	}
}

void Homework_2_2_1()
//Давай попробуем такого рода задачки :
//Задания на последовательности:
//Пользователь вводит число n. Далее попросить его ввести еще n числел. 
//2. Вывести true, если первое и последнее числа равны.

{
	int n = 0; //для количества вводимых чисел
	int a = 0; //переменная для имитации бурной деятельности по анализу ввода данных пользователем
	int firstnumber = 0; //для отлова значения первого числа
	int lastnumber = 0; //для отлова значения последнего числа

	cout << "Введите число n: ";
	cin >> n;

	cin >> firstnumber; // ловим первое по вводу число

	for (int i = 2; i <= n - 1; i++) // стартуем со второй итерации цикла, потому что первое число уже отловили и до предпоследней итерации цикла, т.к. последнее число отловим за циклом
	{
		cin >> a;
	}
	cin >> lastnumber; // ловим последнее по вводу число

	if (firstnumber == lastnumber)
	{
		cout << "True" << endl;
	}

}

void Homework_2_2_2()
//Давай попробуем такого рода задачки :
//Задания на последовательности:
//Пользователь вводит число n. Далее попросить его ввести еще n числел. 
//2. Вывести true, если первое и последнее числа равны.

{
	int n = 0; //для количества вводимых чисел
	int a = 0; //переменная для ввода остальных чисел после первого
	int firstnumber = 0; //для присвоения значения первого числа

	cout << "Введите число n: ";
	cin >> n;

	cin >> firstnumber; // первое по вводу число

	for (int i = 2; i <= n; i++) // стартуем со второй итерации цикла, потому что первое число уже присвоено переменной
	{
		cin >> a;
	}
	if (a == firstnumber)
	{
		cout << "True" << endl;
	}
	else
	{
		cout << "False" << endl;
	}
}

void Homework_2_3()
//Задания на последовательности:
//Пользователь вводит число n. Далее попросить его ввести еще n числел. 
//3. Вывести сколько раз в последовательности встречались четные числа.

{
	int n = 0; //для количества вводимых чисел
	int a = 0; //переменная для ввода чисел
	int d = 0; //счетчик четных чисел

	cout << "Введите число n: ";
	cin >> n;

	for (int i = 1; i <= n; i++)
	{
		cin >> a;
		if (a % 2 == 0 && a != 0)
		{
			d++;
		}
	}
	cout << "Количество четных чисел: " << d << endl;
}

void Homework_2_4()
//Задания на последовательности:
//Пользователь вводит число n. Далее попросить его ввести еще n числел. 
//4. Вывести сумму четных чисел и произведение нечетных чисел.
//   Пример ввода: 5  1 2 5 3 6  Ответ: 8 15
//   8 это 2 + 6. 15 это 1 * 5 * 3

{
	int n = 0; //для количества вводимых чисел
	int a = 0; //переменная для ввода чисел
	int d = 0; //накопление четных чисел
	int e = 1; //накопление нечетных чисел, но так как накопление путём произведения, нельзя, чтобы был первым множетелем 0

	cout << "Введите число n: ";
	cin >> n;

	for (int i = 1; i <= n; i++)
	{
		cin >> a;
		if (a % 2 == 0 && a != 0)
		{
			d += a;
		}
		if (a % 2 != 0)
		{
			e *= a;
		}
	}
	cout << "Сумма четных чисел: " << d << endl;
	cout << "Произведение нечетных чисел: " << e << endl;
}

void Homework_2_5()
//Задания на последовательности:
//Пользователь вводит число n. Далее попросить его ввести еще n числел. 
//5. Вывести самое большое число и самое маленькое.

{
	//механически и с помощью гугла и метода научного тыка я её сделал, но ментально её осознать как-то не получается
	//в частности - на глубинное понимание правильности подхода не ложится мошенство с перехватом первого числа и приравниванию всех переменных

	int rounds = 0; //для количества вводимых чисел 
	int max; //для максимального числа
	int min; //для минимального числа
	int user_input = 0; //переменная для ввода чисел пользователем
	int first_from_user_input = 0;
	
	cout << "Введите число: ";
	cin >> rounds;
	cin >> first_from_user_input; //ловим первое число, чтобы поймать отличное от нуля или исключить рандомное отрицательное число
	
	min = first_from_user_input; //так как я не знаю в какую сторону будет идти минимум и максимум (в минус или в плюс), то стартовать с нуля - заведомо устанавливать ограничение по минимуму
	max = first_from_user_input; 

	for (int i = 2; i <= rounds; i++) // с двух, т.к. первое число пользователь уже ввёл
	{
		cin >> user_input;

		if (user_input > max) //если введённое число больше, чем дефолтное, то
		{
			max = user_input; //увеличиваем максимальное число путем присваивания ему введённого числа пользователем
		}
		else if (user_input < min) //если введённое число меньше, чем первое введённое, пойманное чтобы поймать отличие от нуля или исключить рандомное отрицательное число
		{
			min = user_input;
		}
	}
	cout << "Наибольшее число: " << max << endl;
	cout << "Наименьшее число: " << min << endl;
}

void Homework_2_6()
//Задания на последовательности:
//Пользователь вводит число n. Далее попросить его ввести еще n числел. 
//6. Вывести 1, если все числа положительные. -1 - если все числа отрицательные. 0 - если есть как положительные так и отрицательные числа.

{
	int n = 0; //для количества вводимых чисел 
	int a = 0; //переменная для ввода чисел
	int d = 0; //для счетчика только положительных или только отрицательных чисел
	int e = 0; //для накопления суммы с учетом знака
	int f = 0; //для накопления суммы по модулю для последующего сравнения сумм и вывода условия - 0

	cout << "Введите число n: ";
	cin >> n;

	for (int i = 1; i <= n; i++)
	{
		cin >> a;
		//Надо заводить условие двух сумм сразу после ввода а - сумма с введённым числом и сумма по модулю. 
		//После - проверка. Если сумма введённых не равна сумме по модулю, пишем 0.
		e = e + a;
		f = abs(f) + abs(a);

		if (a > 0) // проверка если все положительные за исключением нуля
		{
			d++; // если число положительное, увеличиваем счетчик
		}
		if (a < 0) // проверка если все отрицательные за исключением нуля
		{
			d--; // если число положительное, увеличиваем счетчик в минус
		}
	}

	if (d == n) //сравнение количества введённых цифр и количества положительных цифр
	{
		cout << "1 - все числа положительные" << endl;
	}
	else if (d == n *-1)
	{
		cout << "-1 - все числа отрицательные" << endl;
	}
	else
	{
		cout << "0 - есть и положительные и отрицательный" << endl;
	}

	// 1 2 3
	// f - 6
	// e - 6
	
	// -1 -2 -3
	// f - 6
	// e - -6


	if (e == f)
	{
		cout << "1 - все числа положительные" << endl;
	}
	else if (abs(e) == f)
	{
		cout << "-1 - все числа отрицательные" << endl;
	}
	else
	{
		cout << "0 - ть и положительные и отрицательный" << endl;
	}
	
	if (abs(e) != f) //эту проверку нужно выносить за цикл, чтобы попытка этой проверки не перехватывала поток отрицательных чисел
	{
		cout << "Сумма чисел с учетом знака равна: " << e << endl;
		cout << "Сумма чисел без учета знака равна: " << f << endl;
		cout << "0 - числа и положительные, и отрицательные" << endl;
	}


}

void Homework_2_7()
//Задания на while:
//1. Просить пользователя вводить числа, пока он не введет нечетное число.Если пользователь ввел 0, написать "OMG" и закончить программу.
{
	int a = 0;
	do
	{
		cin >> a;
		if (a == 0)
		{
			cout << "OMG!" << endl;
			break;
		}
	} while (a % 2 == 0);
}

void Homework_2_8()
//Задания на while:
//2. Просить пользователя вводить числа, до тех пор пока он не введет 10. Но первые 5 введенных чисел не считаются.
//Например, ввод : 1 4 10 4 5 7 6 2 4 10. Не остановились на первой 10, т.к.она была введена третьей.
{
	int a = 0;

	for (int i = 0; i < 5; i++)
	{
		cin >> a;
	}
	do
	{
		cin >> a;
	
	} while (a != 10);

	
}

void Homework_2_8_1()
{
	int a = 0;
	int n = 0;

	do
	{
		cin >> a;
		n++;
	} while (n < 5 || a != 10);// ИЛИ работает слева направо, если первое истинно - второе не проверяет. будет первые 5 раз сравнивать только по n, а потом будет второе условие сравнивать
}

void Homework_2_9()
//3. Пользователь вводит числа n, a, b.Вывести первые n чисел, которые делятся на a и на b.
{
	// Стартуем с 1. До тех пор пока не насобираем n чисел, бежим вверх. Если увидели число, которе делится, то
	// выводим это число, увеличиваем счетчик

	int n;
	int a; // делитель №1
	int b; // делитель №2
	int d = 0;
	int e = 1;

	cin >> n; //сколько чисел вводит человек
	cin >> a; //вводим делитель 1
	cin >> b; //вводим делитель 2


	while (d < n)
	{
		if (e % a == 0 && e % b == 0)
		{
			cout << e << endl;
			d++;
		}
		e++;
	}
}

void Homework_2_9_1()
//4. Пользователь вводит число a.Вывести все степени двойки, которые меньше а.
//Например пользователь ввел 200. Вывод : 2 4 8 16 32 64 128
{
	int n = 1; //для степени
	int a = 0; //для числа
	int c = 0;

	cin >> a;
	while (c < a)
	{
		c = pow(2, n);
		n++;
		cout << c;
	}
}

void Homework_2_9_2()
//4. Пользователь вводит число a.Вывести все степени двойки, которые меньше а.
//Например пользователь ввел 200. Вывод : 2 4 8 16 32 64 128
{
	int a = 0; //для числа
	int c = 2; // итоговое число

	cin >> a;
	while (c < a)
	{
		cout << c;
		c *= 2;
	}
}

void Homework_2_10()
//5. Пользователь вводит число а.Вывести сначала половину от а, потом четверь, потом восьмую часть и так до 1.
//Например, ввод : 100.  Вывод : 100 50 25 12 6 3 1
//Например, ввод : 15.  Вывод : 15 7 3 1
{
	int a = 0; //для числа ввода пользователя

	cin >> a;
	while (a > 0)
	{
		cout << a << endl;
		a /= 2;
	}
}

void Homework_2_11()
//6. Просить пользователя вводить 3 числа(дату), пока пользователь не введет 15 марта 2020 года.
{
	int y = 0; //для года
	int m = 0; //для месяца
	int d = 0; //для дня

	do
	{
		cin >> y;
		cin >> m;
		cin >> d;

	} while (y != 2020 && m != 3 && d != 15);

}

void Homework_2_12()
//1. Пользователь вводит число n.Вывести первые n чисел, у которых последняя цифра 7.
//Пример ввода : 4. Вывод : 7 17 27 37
{
	int n = 0; //для ввода числа n
	int x = 7; //dlya starta s nulya
	int y = 0; // dlya schetchika

	cin >> n;
	do
	{
		cout << x << ' ';
		x += 10;
		y++;
	} while (y != n);
}

void Homework_2_13()
//2. Генерировать рандомные числа, в диапазоне от 0 до 100, пока не сгенерируется число 37. Сгенерированные числа выводить на экран.
{
	int n = 37; //iskomoe chislo
	int x = 0; //

	do
	{
		x = rand()%100;
		cout << x << ' ';
	} while (x != n);
}

void Homework_2_14()
//3. Пользователь вводит число n.
//Генерировать рандомные числа, в диапазоне от 0 до 100, пока не сгенерируется n четных чисел.
//Сгенерированные числа выводить на экран.
{
	int n = 0; //kolichestvo chetnyh chisel
	int x = 0; //dlya randomnyh chisel
	int y = 0; //dlya progona schetchika
	

	cin >> n;

	do
	{
		x = rand() % 100;//подбирать рандомное число
		cout << x << ' ';//выводить его на экран
		if (x % 2 == 0)
		{
			y++;//и увеличиваем счетчик
		}
	} while (y != n); //до тех пор пока не достигнем числа n
}

void Homework_2_15()
//4. Компьютер загадывает случайное число.Пользователь пытается угадать.После каждой попытки,
//компьютер пишет : введенное число больше или меньше загаданного.Такое мы уже делали.
//Но теперь, кажду 5 попытку, компьютер меняет загаданное число.
{
	int x = 0; //пользовательский ввод числа для угадывания загаднного компьютером
	int y = 5; //счетчик проверки лимита числа попыток до смены рандомного числа на новое
	int z = 0; //счетчик накопления числа попыток

	
	int n = rand() % 10; //компьютер загадывает случайное число в диапазоне до 10
	cout << "Загаданное компьютером число: " << n << endl;//debug вывод загаданного компьютером числа

	do
	{
		//if (z % y == 0)
		if (z == y)
		{
			z = 0;
			n = rand() % 10;
			cout << "Загаданное компьютером число: " << n << endl;//debug вывод загаданного компьютером числа
		}
		z++; //увеличиваем счетчик попыток пользователя на 1
		cout << "Текущая попытка пользователя №: " << z << endl; //debug-вывод - выводим текущую попытку пользователя
		cin >> x; //пользователь вводит число
		if (x > n)
		{
			cout << "Ваше число больше загаданного " << endl;
		}
		else if (x < n)
		{
			cout << "Ваше число меньше загаданного " << endl;
		}
		else
		{
			cout << "Правильное число " << endl;
		}
	} while (x != n); //до тех пор пока не введенное пользователем число не станет равно загадонному компом числу


}

#pragma endregion

//массивы. как задавать в массив переменные. как написать игру 21. преобразовать карту в число или уникальный идентификатор.

// ========================================================================= //

#pragma region Classwork_3_Arrays

void IsuchaemMassivy()
{
	int n = 10;
	int a = 0;

	int arr[10]; // Создал 10 интовых переменных подряд. 0 - первая ячейка, 9 - последняя. 10 ячейки НЕТУ!
	
	arr[3] = 5;
	arr[0] = 3;
	arr[4] = (arr[3] + arr[0]) * 2;

	// arr[0]  = 0;
	// arr[1]  = 1;
	// arr[2]  = 2;
	// ...
	// arr[9]  = 9;
	
	for (int i = 0; i < n; i++)
	{
		arr[i] = i; //взять у массива ячейку с номером, который соответствует переменной i и присвоить туда то, что сидит в переменной i
	}
	cout << arr << endl;

	//0 1 2 3 4 5 6 7 8 9

	for (int i = 0; i < n; i++)
	{
		a = rand() % 10;
		arr[i] = a;
	}

	for (int i = 0; i < n; i++)
	{
		cout << arr[i] << ' ';
	}
	cout << endl;

	for (int i = 0; i < n; i++)
	{
		if (arr[i] % 2 == 0) // выводим только четные элементы из массива
		{
			cout << arr[i] << ' ';
		}
	}
	cout << endl;

	for (int i = 0; i < n; i++)
	{
		if (i % 2 == 0) // выводим только элементы с четными индексами
		{
			cout << arr[i] << ' ';
		}
	}
	cout << endl;

	// 5 0 4 7 7 8 9 4 9 8 
	// 4 7 8 9 9
	
	for (int i = 1; i < n; i++)
	{
		if (arr[i] > arr[i-1]) //
		{
			cout << arr[i] << ' ';
		}
	}
	cout << endl;
	
	for (int i = 0; i < n-1; i++) //надо всегда проверять границы массива в + и в -, бежим до предпоследнего элемента массива
	{
		if (arr[i] > arr[i+1]) //
		{
			cout << arr[i] << ' ';
		}
	}
	cout << endl;

	// вывести true в конце если в массиве есть 0
	int d = 0;
	bool is_zero_exist = false;
	for (int i = 0; i < n; i++) //
	{
		if (arr[i] == 0) //
		{
			is_zero_exist = true;
			d++;
		}
	}
	if (is_zero_exist)
	{
	cout << "True" << ' ';
	}

	cout << endl;
}

void IsuchaemMassivy_1()
{
	int n = 10;
	int a = 0;
	int max;
	int arr[10]; // Создал 10 интовых переменных подряд. 0 - первая ячейка, 9 - последняя. 10 ячейки НЕТУ!
	
	for (int i = 0; i < n; i++)
	{
		a = rand() % 10;
		arr[i] = a;
		cout << arr[i] << ' ';
	}
	cout << endl;

	// Найти самое большое число в массиве

	max = arr[0];
	for (int i = 1; i < n; i++) //стартуем с 1(второй элемент) потому что первый элемент уже отработан
	{
		if (arr[i] > max)
		{
			max = arr[i];
		}
	}
	cout << max << endl;

	//заменить в массиве все числе меньше 5 на нули
	for (int i = 0; i < n; i++) //
	{
		if (arr[i] < 5)
		{
			arr[i] = 0;
		}
	}

	for (int i = 0; i < n; i++)
	{
		cout << arr[i] << ' ';
	}
}

void IsuchaemMassivy_2()
{
	int n = 10;
	int arr[10];  

	for (int i = 0; i < n; i++)
	{
		arr[i] = rand() % 10;
	}

	arr[rand() % 10] = -1; // В случайную ячеку массива записываем -1, при этом это нужно чтобы исключить совпадение с рандомными значениями записанными в массив

	for (int i = 0; i < n; i++)
	{
		cout << arr[i] << ' ';
	}
	cout << endl;

	//вывести номер ячейки, в которую вписался -1
	int nomercell = 0;
	for (int i = 0; i < n; i++)
	{
		if (arr[i] == -1)
		{
			nomercell = i;
		}
	}
	cout << nomercell << endl;
}

void IsuchaemMassivy_3()
{
	const int n = 20;
	int arr[n];

	for (int i = 0; i < n; i++)
	{
		arr[i] = rand() % 10;
	}

	// 5 раз. В случайную ячеку массива записываем -1, при этом это нужно чтобы исключить совпадение с рандомными значениями записанными в массив
	for (int j = 0; j < 5; j++)
	{
		arr[rand() % n] = -1;
	}

	for (int i = 0; i < n; i++)
	{
		cout << arr[i] << ' ';
	}
	cout << endl;

	// Вывести индекс ПЕРВОГО элемента с -1
	for (int i = 0; i < n; i++)
	{
		if (arr[i] == -1)
		{
			cout << i << endl;
			break;
		}
	}

	// Вывести индекс ПОСЛЕДНЕГО элемента с -1
	int numbercell = 0;
	for (int i = 0; i < n; i++)
	{
		if (arr[i] == -1)
		{
			numbercell = i;
		}
	}
	cout << numbercell << endl;

	// Вывести индекс ВСЕХ элементов с -1
	for (int i = 0; i < n; i++)
	{
		if (arr[i] == -1)
		{
			cout << i << ' ';
		}
	}
	cout << endl;

	// Вывести индекс ВТОРОГО элемента с -1
	numbercell = 0;
	int d = 0;
	for (int i = 0; i < n; i++)
	{
		if (arr[i] == -1)
		{
			numbercell = i;
			d++;
			if (d == 2)
			{
				break;
			}
		}
	}
	cout << numbercell << endl;

	// Вывести индекс ПРЕДПОСЛЕДНЕГО элемента с -1
	int prevnumbercell = 0;
	for (int i = 0; i < n; i++)
	{
		if (arr[i] == -1)
		{
			prevnumbercell = numbercell;
			numbercell = i;
		}
	}
	cout << prevnumbercell << endl;

	// Вывести индекс ПРЕДПОСЛЕДНЕГО элемента с -1. Можно искать в последовательности с конца.
	numbercell = 0;
	d = 0;
	for (int i = n-1; i >= 0; i--)
	{
		if (arr[i] == -1)
		{
			numbercell = i;
			d++;
			if (d == 2)
			{
				break;
			}
		}
	}
	cout << numbercell << endl;
}

void IsuchaemMassivy_4()
{
	const int n = 20;
	int arr[n];

	// Найти -1 и поставить ее в конец массива
	// 1 2 3 -1 5 6 7 8 9

	// ======================================================== //
	// 1 2 3 -1 5 6 7 8 -1
		for (int i = 0; i < n; i++)
		{
			arr[i] = rand() % 10;
		}
		arr[rand() % n] = -1;

		for (int i = 0; i < n; i++)
		{
			cout << setw(2) << arr[i] << ' ';
		}
		cout << endl;

	arr[n - 1] = -1;

		for (int i = 0; i < n; i++)
		{
			cout << setw(2) << arr[i] << ' ';
		}
		cout << endl << endl;


	// ======================================================== //
	// 1 2 3 0 5 6 7 8 -1
		for (int i = 0; i < n; i++)
		{
			arr[i] = rand() % 10;
		}
		arr[rand() % n] = -1;
		for (int i = 0; i < n; i++)
		{
			cout << setw(2) << arr[i] << ' ';
		}
		cout << endl;

	for (int i = 0; i < n; i++)
	{
		if (arr[i] == -1)
		{
			arr[i] = 0;
		}
	}
	arr[n - 1] = -1; //в последнем элементе массива прописываем -1

		for (int i = 0; i < n; i++)
		{
			cout << setw(2) << arr[i] << ' ';
		}
		cout << endl;

	// ======================================================== //
	// 1 2 3 9 5 6 7 8 -1
		for (int i = 0; i < n; i++)
		{
			arr[i] = rand() % 10;
		}
		arr[rand() % n] = -1;
		for (int i = 0; i < n; i++)
		{
			cout << setw(2) << arr[i] << ' ';
		}
		cout << endl;

	for (int i = 0; i < n; i++)
	{
		if (arr[i] == -1)
		{
			arr[i] = arr[n - 1];
			break;
		}
	}

	arr[n - 1] = -1; //в последнем элементе массива прописываем -1

		for (int i = 0; i < n; i++)
		{
			cout << setw(2) << arr[i] << ' ';
		}
		cout << endl;
}

void IsuchaemMassivy_5()
{
	const int n = 20;
	int arr[n];

	for (int i = 0; i < n; i++)
	{
		arr[i] = i;
	}

	// 0 1 2 3 4 5 6 7 8
	// 0 1 2 4 4 5 6 7 8
	// 0 1 2 4 5 5 6 7 8
	
	// 0 1 2 4 5 6 7 8 3
	for (int i = 4; i < n; i++)
	{
		arr[i - 1] = arr[i];
	}
	arr[n - 1] = 3;

}

void IsuchaemMassivy_6()
{
	const int n = 20;
	int arr[n];

	for (int i = 0; i < n; i++)
	{
		arr[i] = rand() % 10;
	}
	arr[rand() % n] = -1;

	for (int i = 0; i < n; i++)
	{
		cout <<  arr[i] << ' ';
	}
	cout << endl;

	// 0 1 2 3 4 5 6 


	// 1 2 3 -1 5 6 7 8  9
	// 1 2 3  5 6 7 8 9 -1
	int numbercell = 0;
	for (int i = 0; i < n; i++)
	{
		if (arr[i] == -1)
		{
			numbercell=i;
			for (int j = numbercell + 1; j < n; j++)
			{
				arr[j - 1] = arr[j];
			}
		}
	}
	arr[n - 1] = -1;

		for (int i = 0; i < n; i++)
		{
			cout << arr[i] << ' ';
		}
		cout << endl;
}

void IsuchaemMassivy_7()
//0. Создать массив размера n.Заполнить его четверками.В третью ячейкук записать 6, а в предпоследнюю 8.
{
	const int n=10;
	int a[n];
	for (int i = 0; i < n; i++)
	{
		a[i] = 4;
	}

	a[2] = 6;
	a[n - 2] = 8; //n-1 в массиве - это всегда последний элемент, т.к. соответствия, сдвиг на -1.

	for (int i = 0; i < n; i++)
	{
		cout << a[i] << ' ';
	}
	cout << endl;
}

void IsuchaemMassivy_8()
//1. Создать массив размера n и записать в него : на четные позиции нули, на нечетные рандомные чсисла.
{
	const int n = 10;
	int a[n];

	//int b = 3;
	//int c;
	//c = b++; // сначала присваивается в с значение b, а потом увеличение b на 1, при этом с не учитывает увеличение b
	// c = b;
	// b = b+1;
	//c = ++b; // сначала произойдет увеличение b, а потом в с присвоится увеличенное b
	// b=b+1;
	// c = b;
	// постфиксный инкремент имеет самый низкий приоритет исполнения, префиксный имеет самый высокий приоритет
	//c = b - b;
	//c = b++ - b; //порядок выполнения операций: сначала b - b, c = 0 (потому что b-b без учета инкремента), потом b++.
	//c = ++b - b; //порядок выполнения операций: сначала b++, потом b - b; потом c = 0 (потому что b-b с учетом инкремента).
	//cout << b << endl;
	//cout << c << endl;

	for (int i = 0; i < n; i+=2)
	{
		a[i] = 0;
	}

	for (int i = 1; i < n; i += 2)
	{
		a[i] = rand()%10;
	}

	for (int i = 0; i < n; i++)
	{
		cout << a[i] << ' ';
	}
	cout << endl;
}

void IsuchaemMassivy_9()
//2. Создать массив размера n и записать в него следующие числа{ 0, 2, 4, 6, 8, 10, ..., 2(n - 1) }
{
	const int n = 10;
	int a[n];

	for (int i = 0; i < n; i ++)
	{
		a[i] = 2 * i;
	}

	for (int i = 0; i < n; i++)
	{
		cout << a[i] << ' ';
	}
	cout << endl;
}

void IsuchaemMassivy_10()
//3. Создать массив размера n и записать в него следующие числа { n - 1, n - 2, ..., 3, 2, 1, 0 }
//Заполнение.
{
	const int n = 10;
	int a[n];

	for (int i = 0; i < n; i++)
	{
		a[i] = n-i-1;
	}

	for (int i = 0; i < n; i++)
	{
		cout << a[i] << ' ';
	}
	cout << endl;
}

void IsuchaemMassivy_11()
//n. заполнить массив случайными числами от 0 до 9
//Фильтр.вывести на экран номера ячеек, где есть значение 4
{
	const int n = 10;
	int a[n];

	for (int i = 0; i < n; i++)
	{
		a[i] = rand()%10;
	}

	for (int i = 0; i < n; i++)
	{
		cout << a[i] << ' ';
	}
	cout << endl;

	for (int i = 0; i < n; i++)
	{
		if (a[i] == 4)
		{
			cout << i << ' ';
		}
	}
	cout << endl;
}

void IsuchaemMassivy_12()
//n. заполнить массив случайными числами от 0 до 9
//Фильтр.вывести на экран номера ячеек, где значение в ячейке равно значению в следующей ячейке
{
	const int n = 10;
	int a[n];

	for (int i = 0; i < n; i++)
	{
		a[i] = rand() % 5;
	}

	for (int i = 0; i < n; i++)
	{
		cout << a[i] << ' ';
	}
	cout << endl;

	for (int i = 0; i < n-1; i++) // чтобы не было выхода за границы массива, бежим не до последнего, а до предпоследнего значения n
	{
		if (a[i] == a[i+1]) //может случиться выход за границы массива, поэтому надо ставить ограничения через n
		{
			cout << i << ' ';
		}
	}
	cout << endl;
}

void IsuchaemMassivy_13()
//n. заполнить массив случайными числами от 0 до 9
//Фильтр.вывести на экран номера ячеек, где значение в ячейке больше следующего и предыдущего, локальный максимум, игнорируя первый и последний элемент
{
	const int n = 10;
	int a[n];

	for (int i = 0; i < n; i++)
	{
		a[i] = rand() % 5;
	}

	for (int i = 0; i < n; i++)
	{
		cout << a[i] << ' ';
	}
	cout << endl;

		if (a[0] > a[0 + 1]) //может случиться выход за границы массива, поэтому надо ставить ограничения через n
		{
			cout << 0 << ' '; // 0 - несмотря на то, что выведет 0 - является первым индексом в массиве
		}
	for (int i = 1; i < n - 1; i++) // чтобы не было выхода за границы массива, бежим не до последнего, а до предпоследнего значения n
	{
		if (a[i] > a[i - 1] && a[i] > a[i + 1]) //может случиться выход за границы массива, поэтому надо ставить ограничения через n
		{
			cout << i << ' ';
		}
	}
		if (a[n - 1] > a[n - 2]) //может случиться выход за границы массива, поэтому надо ставить ограничения через n
		{
			cout << n-1 << ' '; // n-1 = 9
		}
	cout << endl;
}

void IsuchaemMassivy_14()
//n. заполнить массив случайными числами от 0 до 9
//Поиск. вывести true если в массиве есть 0 и false если 0 нет. вывести 1 раз, а не каждый раз.
{
	const int n = 10;
	int a[n];
	bool IsZero = false; //изначально предполагаем что нуля нет, а если найдём - подставим true

	for (int i = 0; i < n; i++)
	{
		a[i] = rand() % 10;
	}

	for (int i = 0; i < n; i++)
	{
		cout << a[i] << ' ';
	}
	cout << endl;

	for (int i = 0; i < n; i++)
	{
		if (a[i] == 0)
		{
			IsZero = true;
		}
	}
	cout << (IsZero == true ? "True" : "False");
	cout << endl;
}

void IsuchaemMassivy_15()
//n. заполнить массив случайными числами от 0 до 9
//Поиск. вывести индекс первого нуля, а если нуля нет, вывести -1
//Поиск. вывести индекс последней единицы? а если единицы нет, вывести -1
{
	const int n = 10;
	int a[n];
	int b = -1; //чтобы запомнить в нее номер индекса, заведомо присваиваем b значение, которое не может быть никогда присвоено b внутри цикла. Таким образом проверка на происхождение изменений в b даст результат.
	int c = -1;

	for (int i = 0; i < n; i++)
	{
		a[i] = rand() % 5;
	}

	for (int i = 0; i < n; i++)
	{
		cout << a[i] << ' ';
	}
	cout << endl;

	for (int i = 0; i < n; i++)
	{
		if (b == -1 && a[i] == 0) //продолжаем поиск пока b не равен -1, как только нашли - поиск закончится
		{
			b = i;
		}
		if (a[i] == 1) //продолжаем поиск пока c не равен -1, как только нашли - поиск закончится
		{
			c = i;
		}
	}
	//cout << (b < 10 ? b : -1); было бы если бы b не был равен -1, а был равен n или любое другое число вне границ массива
	cout << b;
	cout << c;
	cout << endl;
}

void IsuchaemMassivy_16()
//n. заполнить массив случайными числами от 0 до 9
//Подсчет. вывести количество нулей в массиве
{
	const int n = 10;
	int a[n];
	int b = 0;

	for (int i = 0; i < n; i++)
	{
		a[i] = rand() % 5;
	}

	for (int i = 0; i < n; i++)
	{
		cout << a[i] << ' ';
	}
	cout << endl;
	
	for (int i = 0; i < n; i++)
	{
		if (a[i] == 0)
		{
			b++;
		}
	}
	cout << b << endl;
}

void IsuchaemMassivy_17()
//n. заполнить два массива со случайными числами от 0 до 9
//вывести тот (имя) массив, в котором сумма элементов больше.
{
	const int n = 10;
	int a[n];
	int b[n];
	int SummaA = 0;
	int SummaB = 0;

	for (int i = 0; i < n; i++)
	{
		a[i] = rand() % 5;
		b[i] = rand() % 5;
	}

	for (int i = 0; i < n; i++)
	{
		cout << a[i] << ' ';
	}
	cout << endl;
	for (int i = 0; i < n; i++)
	{
		cout << b[i] << ' ';
	}
	cout << endl;

	for (int i = 0; i < n; i++)
	{
		SummaA += a[i];
		SummaB += b[i];
	}
	cout << (SummaA < SummaB ? "b" : "a");
}

void IsuchaemMassivy_18()
//n. заполнить два массива со случайными числами от 0 до 9
//Фильтр на два массива. вывести индексы элементов, где в этом индексе в массиве а значение больше чем в соответствующем индексе массива b
{
	const int n = 10;
	int a[n];
	int b[n];

	for (int i = 0; i < n; i++)
	{
		a[i] = rand() % 5;
		b[i] = rand() % 5;
	}

	for (int i = 0; i < n; i++)
	{
		cout << a[i] << ' ';
	}
	cout << endl;
	for (int i = 0; i < n; i++)
	{
		cout << b[i] << ' ';
	}
	cout << endl;

	for (int i = 0; i < n; i++)
	{
		if (a[i] > b[i])
		{
			cout << i << ' ';
		}
	}
}

void IsuchaemMassivy_19()
//n. заполнить два массива со случайными числами от 0 до 9
//каждый элемент массива а умножаем на каждый элемент массива b
{
	const int n = 10;
	const int m = 20;
	int a[n];
	int b[m];

	for (int i = 0; i < n; i++)
	{
		a[i] = rand() % 5;
	}
	for (int i = 0; i < m; i++)
	{
		b[i] = rand() % 5;
	}

	for (int i = 0; i < n; i++)
	{
		cout << a[i] << ' ';
	}
	cout << endl;
	for (int i = 0; i < m; i++)
	{
		cout << b[i] << ' ';
	}
	cout << endl;

	for (int i = 0; i < m; i++) //запускаем цикл в цикле
	{
		for (int j = 0; j < n; j++)
		{
			cout << a[j] << " * " << b[i] << " = " << a[j] * b[i] << endl;
		}
		cout << endl;
	}
	cout << endl;
}

#pragma endregion

// ========================================================================= //

#pragma region Homework_3
void Homework3_4()
//4. Вывести на экран индексы элементов, в которых записано число 5.
{
	const int n = 10;
	int a[n];

	for (int i = 0; i < n; i++)
	{
		a[i] = rand() % 10;
	}
	for (int i = 0; i < n; i++)
	{
		cout << a[i] << ' ';
	}
	cout << endl;

	for (int i = 0; i < n; i++)
	{
		if (a[i] == 5)
		{
			cout << i << ' ';
		}
	}
}

void Homework3_5()
//5. Вывести на экран индекс последней двойки.Если двойки в массиве нету, вывести - 1.
//Пример.Исходный массив : 3 6 4 2 3 4 6 2 1. Вывод : 7.
//Пример.Исходный массив : 2 3 4 1 5 4 6 7 0. Вывод : 0.
{
	const int n = 10;
	int a[n];
	int index_of_2 = -1;

	for (int i = 0; i < n; i++)
	{
		a[i] = rand() % 10;
	}
	for (int i = 0; i < n; i++)
	{
		cout << a[i] << ' ';
	}
	cout << endl;

	for (int i = 0; i < n; i++)
	{
		if (a[i] == 2)
		{
			index_of_2 = i;
		}
	}
	cout << index_of_2 << ' ';
}

void Homework3_6()
//6. Вывести на экран индексы последней двойки и первой тройки(сначала для двойки, потом для тройки).
//Пример.Исходный массив : 3 6 4 2 3 4 6 2 1. Вывод : 7 0.
//Пример.Исходный массив : 2 3 4 1 5 4 6 7 0. Вывод : 0 1.
{
	const int n = 10;
	int a[n];
	int index_of_2 = -1;
	int index_of_3 = -1;


	for (int i = 0; i < n; i++)
	{
		a[i] = rand() % 10;
	}
	for (int i = 0; i < n; i++)
	{
		cout << a[i] << ' ';
	}
	cout << endl;


	for (int i = 0; i < n; i++)
	{
		if (a[i] == 2)
		{
			index_of_2 = i;
		}
		//if (a[i] == 3)
		//{
		//	if (index_of_3 == -1) // если мы ещё не нашли тройку
		//	{
		//	index_of_3 = i; //то записываем индекс тройки
		//	}
		//}

		if (index_of_3 == -1) // если мы ещё не нашли тройку
		{
			if (a[i] == 3) //а не тройка ли у нас сейчас? Если да - то
			{
				index_of_3 = i; //то записываем индекс тройки
			}
		}
	}
		cout << index_of_2 << ' ' << index_of_3 << ' ';
}

void Homework3_7()
//7. Вывести сколько раз в массиве встречается 0.
{
	const int n = 10;
	int a[n];
	int x = 0;

	for (int i = 0; i < n; i++)
	{
		a[i] = rand() % 10;
	}
	for (int i = 0; i < n; i++)
	{
		cout << a[i] << ' ';
	}
	cout << endl;

	for (int i = 0; i < n; i++)
	{
		if (a[i] == 0)
		{
			x++;
		}
	}
	cout << x << endl;
}

void Homework3_8()
//8. Заменить все нули в массиве на число обозначающее количество нулей в массиве.
//Пример.Исходный массив : 2 3 0 1 5 0 6 7 0. Нулей в массиве 3, заменяем все нули на 3.
//Вывод : 2 3 3 1 5 3 6 7 3
{
	const int n = 10;
	int a[n];
	int x = 0;

	for (int i = 0; i < n; i++)
	{
		a[i] = rand() % 10;
	}
	for (int i = 0; i < n; i++)
	{
		cout << a[i] << ' ';
	}
	cout << endl;

	for (int i = 0; i < n; i++)
	{
		if (a[i] == 0)
		{
			x++;
		}
	}
	for (int i = 0; i < n; i++)
	{
		if (a[i] == 0)
		{
			a[i] = x;
		}
	}
	for (int i = 0; i < n; i++)
	{
		cout << a[i] << ' ';
	}
	cout << endl;
}

void Homework3_9()
//9. Вывести все локальные минимумы.Элемент является локальным минимумом, если он меньше предыдущего и следующего элемента.
//Пример.Исходный массив : 2 3 0 1 5 3 6 7 6 7. Вывод : 2 0 3 6.
//Пример.Исходный массив : 2 1 2 1 2 1 2 1 2 1. Вывод : 1 1 1 1 1
{
	const int n = 10;
	int a[n];
	int x = 0; // для первого числа массива
	int y = 0; // для последнего числа массива

	for (int i = 0; i < n; i++)
	{
		a[i] = rand() % 10;
	}
	for (int i = 0; i < n; i++)
	{
		cout << a[i] << ' ';
	}
	cout << endl;

	if (a[0] < a[0 + 1]) //может случиться выход за границы массива, поэтому надо ставить ограничения через n
	{
		x = a[0];
		cout << x; //вывели на печать первое число
	}
	for (int i = 1; i < n - 1; i++) // чтобы не было выхода за границы массива, бежим не до последнего, а до предпоследнего значения n
	{
		if (a[i] < a[i - 1] && a[i] < a[i + 1]) //может случиться выход за границы массива, поэтому надо ставить ограничения через n
		{
			cout << a[i]; //приклеили к напечатанному ранее дополнительные числа
		}
	}
	if (a[n-1] < a[n-2]) //может случиться выход за границы массива, поэтому надо ставить ограничения через n
	{
		x = a[n-1];
		cout << x; //вывели на печать первое число
	}
}

void Homework3_10()
//10. сгенерировать массив из 5 случайных уникальных чисел. До тех пор пока не сгенерировано уникальное число, 
//генерируем по-новой. for внутри while-a внутри for.
//сделаю массив до 100, сгенерировать 3 случайных числа записать 1 в соответствующие числам ячейки, вывести те ячейки, 
//где записана 1. использовать do генерация while проверка
//либо сразу проверять на уникальность, либо сгенерировать, а потом проверять на уникальность
{
	const int n = 5;
	int a[n];

	for (int i = 0; i < n; i++)
	{
		a[i] = rand() % 10; //заполнить массив случайными числами
	}

	for (int i = 0; i < n; i++)
	{
		cout << a[i] << ' '; //вывести массив на экран
	}
	cout << endl;

}
#pragma endregion

// ========================================================================= //

#pragma region Classwork_4_Arrays
void IsuchaemMassivy_4_1()
{
	const int n = 30;
	int a[n];
	//int a[n] = { 1, 2, 3, 4, 4, 4, 5, 7, 7, 6 };
	int x = 1; //счетчик одинаковых значений

	for (int i = 0; i < n; i++)
	{
		a[i] = rand() % 4; //заполнить массив случайными числами
	}

	for (int i = 0; i < n; i++)
	{
		cout << a[i] << ' '; //вывести массив на экран
	}
	cout << endl;

	// 7 7 4 5 5 7 4 3 3 3 2    4 4 4 3 5 

	// 1, 2, 3, 0, 4, 4, 4, 5, 7, 7, 6
	// 3 4 
	int r = 0;
	for (int i = 0; i < n-1; i++)
	{
		if (a[i] == a[i + 1])
		{
			if (x == 1)
			{
				r = i;
			}
			x++;

		} //после успешного выполнения первого условия - мы не идём в else (если есть else), а возвращаемся в новую итерацию
		else  // a[i] != a[i + 1]
		{
			if (x != 1)
			{
				cout << x << endl;
				cout << r << ' ';
				x = 1;
			}
		}
	}

	if (x != 1)
	{
		cout << x << endl;
		cout << r << ' ';
	}
}

void IsuchaemMassivy_4_2()

{
	const int n = 1000;
	const int MaxValue = 100;
	int a[n];
	int x = 0; //для ввода числа пользователем на проверку наличия в массиве
	int start_i = 0;
	int end_i = n;
	
	// если массив - это for почти всегда, потому что не один элемент, а множество. пробежаться по массиву, а это for
	// "если" в контексте массива - это for, внутри которого if
	
	//0,100
	// 34 [34,100] 

	a[0] = rand() % MaxValue; //
	cout << a[0] << ' ';

	for (int i = 1; i < n; i++)
	{
		//a[i] = a[i - 1] + rand() % (MaxValue-a[i-1]);
		a[i] = a[i - 1] + rand() % 10 + 1; // [a[i - 1] ,  a[i - 1]  + 10]
		cout << a[i] << ' ';
	}
	cout << endl;
	cin >> x;
	
	//if (x < a[n / 2]) // n/2 - это центральный элемент массива, при этом подразумевается номер индекса массива, а не само число
	//{
	//	start_i = 0;
	//	end_i = n/2;
	//}
	//else 
	//{
	//	start_i = n/2;
	//	end_i = n;
	//}
	//
	//for (int i = start_i; i < end_i; i++)
	//{
	//	if (x == a[i])
	//	{
	//		cout << i << ' ';
	//	}
	//}
	
	// start_i = 4;
	// end_i = 9;
	// (9 + 4) / 2 = 6
	// 4 , 6
	// 6 , 9

	// 0, 10  5
	// 0, 5   2
	// 2, 5
	while ((end_i - start_i) > 1)
	{
		if (x < a[(start_i + end_i)/2]) // если x меньше чем среднее число в массиве, то
		{
			end_i = (start_i + end_i) / 2; //сдвинули правую границу массива до середины текущего участка
		}
		else //если x больше либо равно среднего числа в массиве
		{
			start_i = (start_i + end_i) / 2; //сдвигаем левую границу массива
		}
	}
	
	if (x == a[start_i])
	{
		cout << start_i << ' ';
	}

	// 16 17 23 32 41 42 45 53 55 61 87
	// 33

	// 16 17 23 32 41
	// 33

	// 32 41
	// 33

	// 32
	// 33

	// (n/2) / 2
}

void IsuchaemMassivy_4_3()
//раньше мы всегда работали с массивом, который всегда был заранее заполнен, а сейас - другой подход.
{
	const int max_size = 10; // Максимальное возмодное количество элементов в массиве
	int a[max_size];
	int temp_a_i = 0;

	int n = 0; // Сколько элементов в массиве на данный момент будет использовано из общего размера массива, n<=MaxSize

	// 4 5 6 6 7
	// 5 7

	for (int i = 0; i < 5; i++)
	{
		temp_a_i = rand() % 100;
		if (temp_a_i % 2 != 0)
		{
			a[n] = temp_a_i; //добавляем в массив нечетное число
			n++;//растягиваем размер массива
		}
	}
	for (int i = 0; i < n; i++)
	{
		cout << a[i] << ' ';
	}

}

void IsuchaemMassivy_4_4()
//раньше мы всегда работали с массивом, который всегда был заранее заполнен, а сейас - другой подход.
{
	const int max_size = 10; // Максимальное возмодное количество элементов в массиве
	int a[max_size];
	int temp_a_i = 0;
	int c = -1;

	int n = 0; // Сколько элементов в массиве на данный момент будет использовано из общего размера массива, n<=MaxSize

	// 4 5 6 6 7
	// 5 7

	// 8
	// arr = { 8 }
	// 9
	// arr = {8, 9}
	// 8
	// 10
	// arr = {8, 9, 10}
	// 10
	// 9
	// 4
	// arr = { 8, 9, 10, 4 }

	for (int i = 0; i < 5; i++)
	{
		temp_a_i = rand() % 100;
		
		// Проверить что с нашем массиве нет числа temp_a_i
		// Если нет, то 
	}

	for (int i = 0; i < n; i++)
	{
		cout << a[i] << ' ';
	}
}
#pragma endregion

// ========================================================================= //
//1. Вывести таблицу умножения, в таком виде :
//1 * 1 = 1
//1 * 2 = 2
//...
//1 * 9 = 9
//
//2 * 1 = 2
//2 * 2 = 4
//...
//2 * 9 = 18
//...
//9 * 9 = 81
//
//2. Дан массив случайных чисел размера n.Вывести сколько в массиве двоек, троек и четверок.
//3. Дан массив случайных чисел размера n.Вывести 0, если в этом массиве число 3 встретилось раньше числа 4. 
//Вывести 1, если 4 раньше 3. - 1 - если в массиве нет тройки или четверки.
//4. Дан массив случайных чисел размера n.Сделать так, чтоб максимальный элемент в массиве оказался в конце массива.
//Исходный порядок элементов можно не сохранять.
//5. Дан массив случайных чисел размера n.Поменять местами первый минимальный и последний максимальный элементы.
//6. Дан массив случайных чисел размера n.Найти среднее значение элементов массива.Вывести индексы элементов, который 
//наиболее отличается от среднего.
//Например массив : 2 4 3 7 6 5 8. Среднее значение - (2 + 4 + 3 + 7 + 6 + 5 + 8) / 7 = 5. Элемнты, которые наиболее 
//отличаются от 5 это 2 и 8.
//7. Дан массив случайных чисел размера n.Вывести true, если в массиве все числа уникальные, иначе false.
// ========================================================================= //

#pragma region Homework_4_Arrays

void Homework3_11()
//1. Вывести таблицу умножения, в таком виде :
//1 * 1 = 1
//1 * 2 = 2
//...
//1 * 9 = 9
//
//2 * 1 = 2
//2 * 2 = 4
//...
//2 * 9 = 18
//...
//9 * 9 = 81
{
	const int n = 10;
	int a[n]; //первый множитель
	int b[n]; //второй множитель
	int summ = 0; //для результата умножения
	
	//вижу решение задачи как for внутри for-a. Первый for для первного множителя, который 1*, 1* и т.д., второй для *2, *3
	a[0] = 1;
	b[0] = 1;
	for (int i = 1; i < n-1; i++)
	{
		a[i] = i + 1; //
	}

	for (int i = 1; i < n-1; i++)
	{
		b[i] = i + 1; //
	}

	for (int i = 0; i < n-1; i++)
	{
			for (int j = 0; j < n-1; j++)
			{
				summ = a[i] * b[j];
				cout << a[i] << " * " << b[j] << " = " << summ << ' ';
				cout << endl;
			}
			cout << endl;
	}
}

void Homework3_12()
//2. Дан массив случайных чисел размера n.Вывести сколько в массиве двоек, троек и четверок.
{
	const int n = 10;
	int a[n]; //
	int x2 = 0;
	int x3 = 0;
	int x4 = 0;

	for (int i = 0; i < n; i++)
	{
		a[i] = rand() % 10; //заполнить массив случайными числами
	}

	for (int i = 0; i < n; i++)
	{
		cout << a[i] << ' '; //вывести массив на экран
	}
	cout << endl;

	for (int i = 0; i < n; i++)
	{
		if (a[i] == 2)
		{
			x2++;
		}
		if (a[i] == 3)
		{
			x3++;
		}
		if (a[i] == 4)
		{
			x4++;
		}
	}
		cout << x2 << ' ';
		cout << x3 << ' ';
		cout << x4 << ' ';
}

void Homework3_13()
//3. Дан массив случайных чисел размера n.
//Вывести 0, если 3 раньше 4.
//Вывести 1, если 4 раньше 3. 
//-1 - если в массиве нет тройки или четверки.
{
	const int n = 10;
	int a[n]; //
	int index_of_3 = -1;
	int index_of_4 = -1;

	for (int i = 0; i < n; i++)
	{
		a[i] = rand() % 10; //заполнить массив случайными числами
	}

	for (int i = 0; i < n; i++)
	{
		cout << a[i] << ' '; //вывести массив на экран
	}
	
	cout << endl;

	for (int i = 0; i < n; i++)
	{
		if (index_of_3 == -1) // если мы ещё не нашли тройку
		{
			if (a[i] == 3) //а не тройка ли у нас сейчас? Если да - то
			{
				index_of_3 = i; //то записываем индекс тройки
			}
		}
		if (index_of_4 == -1) // если мы ещё не нашли тройку
		{
			if (a[i] == 4) //а не четвёрка ли у нас сейчас? Если да - то
			{
				index_of_4 = i; //то записываем индекс четверки
			}
		}
	}

	if (index_of_3 != -1 && index_of_3 < index_of_4) //так как проверка: больше-меньше, то дефолтный -1 будет всё портить и его надо исключить условием
	{
		cout << 0 << endl;
	}
	if (index_of_4 != -1 && index_of_4 < index_of_3)
	{
		cout << 1 << endl;
	}
	if (index_of_3 == -1 || index_of_4 == -1)
	{
		cout << -1 << endl;
	}

	//if (index_of_3 == -1 || index_of_4 == -1)
	//{
	//	cout << -1 << endl;
	//}
	//else // Противный случай означает что они оба есть
	//{
	//	cout << (index_of_3 < index_of_4 ? 0 : 1) << endl;
	//}

	//cout << index_of_3 << ' ' << index_of_4 << endl; //debug-вывод проверки позиции 3 и 4.
}

void Homework3_14()
//4. Дан массив случайных чисел размера n.Сделать так, чтоб максимальный элемент в массиве оказался в конце массива.
//Исходный порядок элементов можно не сохранять.
{
	const int n = 10;
	int a[n];
	int MaxNumber = -1;
	int IndexOfMaxNumber = -1;

	for (int i = 0; i < n; i++)
	{
		a[i] = rand() % 15; //заполнить массив случайными числами 
	}

	for (int i = 0; i < n; i++)
	{
		cout << a[i] << ' '; //вывести массив на экран
	}
	cout << endl;

	MaxNumber = a[0];
	IndexOfMaxNumber = 0;

	for (int i = 1; i < n; i++) //
	{
		if (a[i] > MaxNumber)
		{
			MaxNumber = a[i];
			IndexOfMaxNumber = i;
		}
	}

	cout << MaxNumber << endl; //debug-print
	cout << IndexOfMaxNumber << endl; //debug-print

	a[IndexOfMaxNumber] = a[n - 1]; // сначала произвожу замену в индексе, где было найдено максимальное число на последнее число
	a[n - 1] = MaxNumber; //потом подменяю последнее текущее число на максимальное число

	for (int i = 0; i < n; i++)
	{
		cout << a[i] << ' '; //вывести массив на экран
	}
	cout << endl;

	// 0 1 2 3 9 4 5 6 7 8
	// 0 1 2 3 4 5 6 7 8 9 

	// IndexOfMaxNumber = 4

	/* 1
		// 0 1 2 3 9 4 5 6 7 8
		swap(4, IndexOfMaxNumber + 1)
	*/

	/* 2
		// 0 1 2 3 4 9 5 6 7 8
		swap(4 + 1, IndexOfMaxNumber + 2)
	*/

	/* 3
		// 0 1 2 3 4 9 5 6 7 8
		swap(4 + 2, IndexOfMaxNumber + 3)
	*/

	/* 4
		// 0 1 2 3 4 9 5 6 7 8
		swap(4 + 3, IndexOfMaxNumber + 4)
	*/

	// 1 2 3 4 10 5 6 7 8
	// 1 2 3 4 5 10 6 7 8
	// ...
	// 1 2 3 4 5 6 7 8 10
	//for (int i = IndexOfMaxNumber; i < n-1; i++)
	while (IndexOfMaxNumber < n - 1)
	{
		int temp = 0;
		temp = a[IndexOfMaxNumber + 1];
		a[IndexOfMaxNumber + 1] = a[IndexOfMaxNumber];
		a[IndexOfMaxNumber] = temp;
		IndexOfMaxNumber++;
	}

	for (int i = IndexOfMaxNumber; i < n - 1; i++) 
	{
		int temp = 0;
		temp = a[i + 1];
		a[i + 1] = a[i];
		a[i] = temp;
	}
}

void Homework3_15()
//5. Дан массив случайных чисел размера n.Поменять местами первый минимальный и последний максимальный элементы.
//2 3 1 4 7 6 3 2 1 4 5 7 4
//минимум тут число 1.
//максиум 7.
//Первый минимум на позиции 2.
//Последний максиум на позиции 11
{
	const int n = 10;
	int a[n];
	//int a[10] = { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 };
	int FirstMin = 0;
	int IndexFirstMin = 0;
	int LastMax = 0;
	int IndexLastMax = 0;
	

	for (int i = 0; i < n; i++)
	{
		a[i] = rand() % 10; //заполнить массив случайными числами 
	}

	for (int i = 0; i < n; i++)
	{
		cout << a[i] << ' '; //вывести массив на экран
	}
	cout << endl;

	FirstMin = a[0];
	LastMax = a[n-1]; //побежим с конца

	for (int i = 1; i < n; i++)
	{
		if (a[i] < FirstMin)
		{
			FirstMin = a[i];
			IndexFirstMin = i;
		}
	}
	for (int i = n-2; i >= 0; i--) //можно пойти от конца к началу в поисках первого максимума
	{
		if (LastMax < a[i])
		{
			LastMax = a[i];
			IndexLastMax = i;
		}
	}
	cout << FirstMin << ' ';
	cout << IndexFirstMin << endl;
	cout << LastMax << ' ';
	cout << IndexLastMax << endl;

	//Поменять местами первый минимальный и последний максимальный элементы.
	a[IndexFirstMin] = LastMax; // сначала произвожу замену в индексе, где было найдено максимальное число на последнее число
	a[IndexLastMax] = FirstMin; //потом подменяю последнее текущее число на максимальное число

	for (int i = 0; i < n; i++)
	{
		cout << a[i] << ' '; //вывести массив на экран
	}
	cout << endl;
}

void Homework3_16()
//6. Дан массив случайных чисел размера n.
//Найти среднее значение элементов массива.
//Вывести индексы элементов, который наиболее отличается от среднего.
//Например массив : 2 4 3 7 6 5 8. Среднее значение - (2 + 4 + 3 + 7 + 6 + 5 + 8) / 7 = 5. 
//Элемнты, которые наиболее отличаются от 5 это 2 и 8.
{
	const int n = 10;
	int a[n];
	//int a[10] = { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 };
	double AverageNumber = 0;
	double MaxDistanceFromAvg = 0;

	for (int i = 0; i < n; i++)
	{
		a[i] = rand() % 10; //заполнить массив случайными числами 
	}

	for (int i = 0; i < n; i++)
	{
		cout << a[i] << ' '; //вывести массив на экран
	}
	cout << endl;

	//AverageNumber = a[0] / n;
	
	//for (int i = 0; i < n; i++)
	//{
	//	AverageNumber = AverageNumber + a[i] / n;
	//}

	for (int i = 0; i < n; i++)
	{
		AverageNumber += a[i];
	}
	AverageNumber = AverageNumber / n;

	cout << AverageNumber << endl;

	for (int i = 0; i < n; i++)
	{
		if (fabs(a[i] - AverageNumber) > MaxDistanceFromAvg) //fabs - для исключения знака, по модулю
		{
			MaxDistanceFromAvg = fabs(a[i] - AverageNumber);
		}
	}

	// 0 0 5 0 5  - 2
	// MaxDistanceFromAvg = 3
	// 2 2

	//int temp = AverageNumber + MaxDistanceFromAvg;
	cout << MaxDistanceFromAvg << endl;

		for (int i = 0; i < n; i++)
	{
			if (fabs(a[i] - AverageNumber) == MaxDistanceFromAvg) //fabs - для исключения знака, по модулю
			{
				cout << i << endl;
			}
	}

}

void Homework3_17()
//7. Дан массив случайных чисел размера n.Вывести true, если в массиве все числа уникальные, иначе false.
{
	const int n = 100;
	int a[n];
	//int a[10] = { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 };
	int b = 0;
	int c = 0;

	for (int i = 0; i < n; i++)
	{
		a[i] = rand() % 10; //заполнить массив случайными числами 
		//a[i] = i; //заполнить массив случайными числами 
	}

	for (int i = 0; i < n; i++)
	{
		//cout << a[i] << ' '; //вaывести массив на экран
	}
	cout << endl;

	for (int i = 0; i < n; i++)
	{
		cout << i << endl;
		for (int j = 0; j < n; j++)
		{
			if (a[j] == a[i])
			{
				b++;
			}
		}
	}

	// 1 2 3 4 4 5 6 7 8 ... 100000 4 ...

	//for (int i = 0; i < n; i++)
	//{
	//	std::cout << i << std::endl;
	//	c = 0;
	//	for (int j = i; j < n; j++)
	//	{
	//		if (a[j] == a[i])
	//		{
	//			c++;
	//			if (c == 2)
	//			{
	//				break;
	//			}
	//		}
	//	}
	//	if (c > 1)
	//	{
	//		break;
	//	}
	//}

	if (b == n)
	{
		cout << "True" << endl;
	}
	else
	{
		cout << "False" << endl;
	}
}

void Homework3_18()
//7. Сгенерировать 5 случайных уникальных чисел, в диапазоне от 0 до 9
{
	const int n = 25;
	int m = 0;
	int a[n];
	int b = 0;

	//for (int i = 0; i < n; i++)
	//{
	//	a[i] = rand() % 10; //заполнить массив случайными числами 
	//}

	// rand == 8 
	// arr = [8]
	// rand = 9
	// arr = [8, 9]
	// rand == 8
	// rand == 9
	// rand = 3

	// 1. Генерируем случайное число b
	// 2. Проверяем было ли такое число в нашем массиве
	// 3. Если было, то вернуться к пункту 1
	// 4. Если не было, то записать это чи сло в маасив и увеличить счетчик m
	// 5. Если m < 5 вернуться к пункту 1

	do
	{
			int Number = rand() % 32;
			cout << "Generate number: " << Number << endl;
			b = 0;
			for (int i = 0; i < m; i++) //второй фор для проверки не встречалось ли число из первого цикла раньше
			{
				if (a[i] == Number) //условие равенства - это означает - такое число стречалось
				{
					b = 1; //если число не уникальное, то ставим флаг
				}
			}
			
			cout << "Cur array: ";
			for (int i = 0; i < m; i++)
			{
				cout << a[i] << ' ';
			}
			cout << endl;

			if (b == 0)
			{
				a[m] = Number;
				m++;
			}

			cout << "Cur array after insert:  ";
			for (int i = 0; i < m; i++)
			{
				cout << a[i] << ' ';
			}
			cout << endl;

	} while (m != n);

	cout << endl;

	for (int i = 0; i < n; i++)
	{
		cout << a[i] << " :";
		cout << a[i] / 4 + 2 << ' ';
		int ma = a[i] % 4;
		if (ma == 0) { cout << 'b';}
		if (ma == 1) { cout << 'p';}
		if (ma == 2) { cout << 't';}
		if (ma == 3) { cout << 'c';}
		cout << endl;
	}

	// 2 b = 0
	// 2 p = 1
	// 2 t = 2
	// 2 c = 3
	// 3 b = 4
	// 3 p = 5
	// 3 t = 6
	// 3 c = 7
	// 4 b = 8
	// ...
	// 9 c = 31

}

void Homework3_19()
//7. Сгенерить случайную колоду
{
	const int n = 32;
	int a[n];
	int Peremesh = 1000000;

	for (int i = 0; i < n; i++)
	{
		a[i] = i;
	}
	for (int i = 0; i < Peremesh; i++)
	{
		int Randomindex1 = rand() % n;
		int Randomindex2 = rand() % n;
		int temp3 = a[Randomindex1];
		a[Randomindex1] = a[Randomindex2];
		a[Randomindex2] = temp3;

	}

	for (int i = 0; i < n; i++)
	{
		cout << a[i] << endl;
	}

	//i, j
	//	temp = a[i];
	//a[i] = a[j]
	//	a[j] = temp
}

#pragma endregion

// ========================================================================= //
//1. Дан массив размера n, заполненный случайными числами. Отзеркалить его относительно середины, т.е.
//Пример1: 1 2 3 4 5. Результатирующий массив : 5 4 3 2 1
//Пример2 : 1 2 3 4 5 6. Результатирующий массив : 6 5 4 3 2 1
//
//2. Сгенерировать такой массив размера n : В нулевой ячейке случайное число от 0 до 10. В первой от 10 до 20.
//Во второй от 20 до 30. И т.д.
//
//3. Дан массив размера n, заполненный случайными числами от 0 до 9. Вывести сколько раз встречалось минимальное число.
//Например массив : 4 3 7 5 4 2 4 4 2 2 9 2. Минимальное тут 2, оно встречалось 4 раза.Значит вывести 4.
//
//4. Дан массив размера n, заполненный случайными числами от 0 до 9. Вывести максимальное или минимальное значение,
//в зависимотси от того, кто больше встречался в массиве.Выводить того, кто больше.Если максимум и минимум встерчались одинаковое
//количество раз, то вывести обоих.
//Пример1 : 6 5 3 8 4 7 5 3
//
//5. Создать 2 массива размер n.Заполнить их как в задаче 2. Вывести все числа из массивов по возрастанию(по сути слить их)
//Пример : 4 15 23 37 43 56
//Пример : 2 16 21 35 48 59
//Вывод : 2 4 15 16 21 23 35 37 43 48 56 59
// ========================================================================= //

#pragma region Classwork_5_Arrays

void Classwork5_1()
//1. Дан массив размера n, заполненный случайными числами. Отзеркалить его относительно середины, т.е.
//Пример1: 1 2 3 4 5. Результатирующий массив : 5 4 3 2 1
//Пример2 : 1 2 3 4 5 6 7 8. Результатирующий массив : 8 7 6 5 4 3 2 1
{
	const int n = 6;
	int a[n];
	int temp = 0;

	for (int i = 0; i < n; i++)
	{
		a[i] = rand() % 10; //заполнить массив случайными числами
	}

	for (int i = 0; i < n; i++)
	{
		cout << a[i] << ' '; //вывести массив на экран
	}
	cout << endl;

	// 0 n-1  n-(i+1) i здесь равен 0
	// 1 n-2  n-(i+1) i здесь равен 1
	// 2 

	for (int i = 0; i < n/2; i++)
	{
		temp = a[i];
		cout << temp << " - " << a[n - (i + 1)] << endl;
		a[i] = a[n - (i + 1)];
		a[n - (i + 1)] = temp;
	}

	for (int i = 0; i < n; i++)
	{
		cout << a[i] << ' '; //вывести массив на экран
	}
	cout << endl;

}

void Classwork5_2()
//2. Сгенерировать такой массив размера n : В нулевой ячейке случайное число от 0 до 10. В первой от 20 до 30.
//Во второй от 40 до 50. 60 до 70 И т.д.
/*
0 - [0  ,10]
1 - [10 ,20]
2 - [40 ,50]
3 - [60 ,70]
*/
{
	const int n = 6;
	int a[n];
	int temp = 0;

	for (int i = 0; i < n; i++)
	{
		a[i] = rand() % 10 + i * 20; //заполнить массив случайными числами - такой способ позволяет задать отсортированный заранее массив
	}

	for (int i = 0; i < n; i++)
	{
		cout << a[i] << ' '; //вывести массив на экран
	}
	cout << endl;

}

void Classwork5_3()
//3. Дан массив размера n, заполненный случайными числами от 0 до 9. Вывести сколько раз встречалось минимальное число.
//Например массив : 4 3 7 5 4 2 4 4 2 2 9 2. Минимальное тут 2, оно встречалось 4 раза.Значит вывести 4.
{
	const int n = 20;
	int a[n];
	int counterofmin = 1;
	int currentmin = 0;

	for (int i = 0; i < n; i++)
	{
		a[i] = rand() % 10; //заполнить массив случайными числами
	}

	for (int i = 0; i < n; i++)
	{
		cout << a[i] << ' '; //вывести массив на экран
	}
	cout << endl;
	
	currentmin = a[0];

	// 4 4 3
	// 1. Если встретили число которое строго меньше текущего минимума: переписываем текущий минимум, счетчик равен 1
	// 2. Если встретили число которое равно текущего минимума: 
	for (int i = 1; i < n; i++)
	{
		if (a[i] < currentmin)
		{
			currentmin = a[i];
			counterofmin = 1;
		}
		else if (a[i] == currentmin)
		{
			counterofmin++;
		}
	}
	cout << currentmin << " - " << counterofmin << endl;
	cout << "------------------" << endl;
}

void Classwork5_4()
//4. Дан массив размера n, заполненный случайными числами от 0 до 9. 
//Вывести максимальное или минимальное значение, в зависимотси от того, кто больше встречался в массиве.
//Выводить того, кто больше. Если максимум и минимум встерчались одинаковое количество раз, то вывести обоих.
//Пример1 : 6 5 3 8 4 7 5 3
{
	const int n = 20;
	int a[n];
	int counterofmin = 1;
	int counterofmax = 1;
	int currentmin = 0;
	int currentmax = 0;

	for (int i = 0; i < n; i++)
	{
		a[i] = rand() % 10; //заполнить массив случайными числами
	}

	for (int i = 0; i < n; i++)
	{
		cout << a[i] << ' '; //вывести массив на экран
	}
	cout << endl;

	currentmin = a[0];
	currentmax = a[0];

	for (int i = 1; i < n; i++)
	{
		if (a[i] < currentmin)
		{
			currentmin = a[i];
			counterofmin = 1;
		}
		else if (a[i] == currentmin)
		{
			counterofmin++;
		}

		if (a[i] > currentmax)
		{
			currentmax = a[i];
			counterofmax = 1;
		}
		else if (a[i] == currentmax)
		{
			counterofmax++;
		}
	}
	cout << currentmin << " - " << counterofmin << endl;
	cout << currentmax << " - " << counterofmax << endl;

	// 0 9

	// 4 6    - 9
	// 5 3    - 0
	// 3 3    - 0 9

	//тернарник - уловие, знак вопроса, что хочу сделать если условие выполнено, знак двоеточия, условие, что делать в противном случае

	if (counterofmin >= counterofmax)
	{
		cout << currentmin << endl;
	}
	if (counterofmin <= counterofmax)
	{
		cout << currentmax << endl;
	}
}

void Classwork5_5()
//5. Создать 2 массива размер n.Заполнить их как в задаче 2. Вывести все числа из массивов по возрастанию(по сути слить их)
//Пример : 4 15 23 37 43 56
//Пример : 2 16 21 35 48 59
//Вывод : 2 4 15 16 21 23 35 37 43 48 56 59 - упорядочивание заявок на покупку и продажу в стакане, как пример. процедура слияния.
{
	const int n = 5;
	int a[n];
	int b[n];

	for (int i = 0; i < n; i++)
	{
		a[i] = rand() % 10 + i * 10; //заполнить массив случайными числами - отсортированный массив
		b[i] = rand() % 10 + i * 10; //заполнить массив случайными числами - отсортированный массив
	}

	for (int i = 0; i < n; i++)
	{
		cout << a[i] << ' '; //вывести массив на экран
	}
	cout << endl;

	for (int i = 0; i < n; i++)
	{
		cout << b[i] << ' '; //вывести массив на экран
	}
	cout << endl;

	int iA = 0;
	int iB = 0;
	
	// a = 4 4 4  
	// b = 2 2 2 

	for (int i = 0; i < n*2; i++)
	{
		// iA iB

		if (iA >= n)
		{
			cout << b[iB] << ' ';
			iB++;
		}
		else if (iB >= n) // iA < n
		{
			cout << a[iA] << ' ';
			iA++;
		}
		else // iA < n  && iB < n
		{
			if (a[iA] < b[iB])
			{
				cout << a[iA] << ' ';
				iA++;
			}
			else
			{
				cout << b[iB] << ' ';
				iB++;
			}
		}
	}
}

void Classwork5_6()
//Сгенерировать 10 чисел от -50 до +100, но в массив записываем только положительные числа
//
//rand генерирует только положительные числе до числа после знака процента, не включая само это число. 
//Чтобы правильно позиционировать диапазон, нужно добавить левую границу диапазона с соответствующим знаком.
// [20,30] rand() % 11 + 20   
// [-20, 30] rand() % 51 + (-20)    
// [-20,-10] rand() % 11 + (-20)
// [min,max] rand() % (max-min+1) + min - общая формула генерации чисел от одного до другого включая последнее (+1)

{
	int n = 0; //размер текущего массива, не может быть константой
	const int m = 10; //размер максимального массива
	int a[m];
	int RandomNumber = 0;

	for (int i = 0; i < m; i++)
	{
		RandomNumber = rand() % 151 + (-50);
		if (RandomNumber >= 0)
		{
		a[n] = RandomNumber; //заполняем текущий индекс массива при условии положительного числа
		n++; //увеличиваю размер массива на 1 при условии, что сгенерировалось положительное число
		}
	}

	for (int i = 0; i < n; i++) 
	{
		cout << a[i] << ' '; //вывести массив на экран - не весь массив, а только ту часть, которая отвечает условию задачи, сам массив больше, но там мусор
	}
	cout << endl;
}

#pragma endregion

// ========================================================================= //
//Обычные задания на массивы :
//1.  Дан массив размера n, заполненный слуайными числами.Вывести 1, если в сумма элементов в первой половине больше чем во второй.
//- 1, если наоборот. 0, если суммы равны.Для массива с нечетным количеством элементов, центральный элемент не участвует в сумме.
//Пример : 0 1 2 3 4 5. Сумма первой половины : 0 + 1 + 2 = 3. Сумма второй : 3 + 4 + 5 = 12. Вторая больше, выводим - 1.
//Пример : 4 3 9 0 1.  Ценральный элемент 9, в сумме не участвует.Сумма первой половины : 4 + 3 = 7. Второй : 0 + 1. Выводим 1.
//Пример : 1 1 1 1 1. Выводим 0.
//
//2. Дан массив размера n, заполненный слуайными числами.Найти идекс первого максимального элемента.Вывести 0, если этот
//элемент находится в первой трети массива, 1 если во второй, 2, если в третьей.
//Например : 1 1 5 2 2 2 3 3 3. Максимум тут 5. Первая треть массива, это 1 1 5, вторая 2 2 2, третья 3 3 3.
//Максимум в первой, так что выводим 0.
//Еще пример : 1 1 1 1 2 2 5 5 5 5 5 5. Тут максиум 5, первый раз он встречается во второй трети(2 2 5 5), выводим 1.
//
//3. Дан массив размера n, заполненный слуайными числами из диапазона[0, n).Легче объяснить на примере :
//Например сгенерировался такой массив(n = 10) : 4 3 8 6 1 2 0 2 4 3. Надо прыгать по элементам и выводить их на экран.
//Прыгать так : сначала берем нулевой элемент, это 4, выводим 4 на экран.Далее берем элемент с индексом 4, это 1, выводим 1 на экран.
//Далее берем элемент с инлексом 1, там 3, выводим 3. Далее берем элемент с индексом 3 и т.д.
//
//4. Дан массив размера n.Заполнить его слуайными числами[-10, 10] таким образом : 
//30 % что число будет отрицательным, 70 % что положительным.
//Будут вопросы по заданию, пиши.
//
//5. Дан массив размера n, заполнить его таким образом : в нулевой ячейке случайноке число от[0, 10].В первой[5, 15].
//Во второй[10, 20] и т.д.
//Вывести true, если массив отсортирован.
// ========================================================================= //

#pragma region Homework_5_Arrays

void Homework5_1()
//Обычные задания на массивы :
//1.  Дан массив размера n, заполненный слуайными числами.Вывести 1, если в сумма элементов в первой половине больше чем во второй.
//- 1, если наоборот. 0, если суммы равны.Для массива с нечетным количеством элементов, центральный элемент не участвует в сумме.
//Пример : 0 1 2 3 4 5. Сумма первой половины : 0 + 1 + 2 = 3. Сумма второй : 3 + 4 + 5 = 12. Вторая больше, выводим - 1.
//Пример : 4 3 9 0 1.  Ценральный элемент 9, в сумме не участвует.Сумма первой половины : 4 + 3 = 7. Второй : 0 + 1. Выводим 1.
//Пример : 1 1 1 1 1. Выводим 0.
{
	const int n = 10;
	int a[n];
	int Summ1Half = 0;
	int Summ2Half = 0;
	int MiddleForEvenArray = 0;
	
	if (n % 2 == 0)
	{
		MiddleForEvenArray = -1;
	}

	for (int i = 0; i < n; i++)
	{
		a[i] = rand() % 10; //заполнить массив случайными числами
	}

	for (int i = 0; i < n; i++)
	{
		cout << a[i] << ' '; //вывести массив на экран
	}
	cout << endl;


	for (int i = 0; i < n/2; i++)
	{
		Summ1Half += a[i];
	}
	cout << Summ1Half << endl;

	for (int i = n-1; i > n/2+MiddleForEvenArray; i--)
	{
		Summ2Half += a[i];
	}
	cout << Summ2Half << endl;


	if (Summ1Half > Summ2Half)
	{
		cout << 1 << endl;
	}
	else if (Summ1Half < Summ2Half)
	{
		cout << -1 << endl;
	}
	else
	{
		cout << 0 << endl;
	}
}

void Homework5_2()
//2. Дан массив размера n, заполненный слуайными числами.Найти идекс первого максимального элемента.
//Вывести 0, если этот элемент находится в первой трети массива, 1 если во второй, 2, если в третьей.
//Например : 1 1 5 2 2 2 3 3 3. Максимум тут 5. Первая треть массива, это 1 1 5, вторая 2 2 2, третья 3 3 3.
//Максимум в первой, так что выводим 0.
//Еще пример : 1 1 1 1 2 2 5 5 5 5 5 5. Тут максиум 5, первый раз он встречается во второй трети(2 2 5 5), выводим 1.
{
	const int n = 7;
	int a[n];
	int currentmax = 0;
	int indexofcurrentmax = 0;

	for (int i = 0; i < n; i++)
	{
		a[i] = rand() % 10; //заполнить массив случайными числами
	}
	for (int i = 0; i < n; i++)
	{
		cout << a[i] << ' '; //вывести массив на экран
	}
	cout << endl;

	currentmax = a[0];

	for (int i = 0; i < n; i++)
	{
		if (a[i] > currentmax)
		{
			currentmax = a[i];
			indexofcurrentmax = i;
		}
	}
	cout << currentmax << endl;
	cout << indexofcurrentmax << endl;

	if (indexofcurrentmax >= 0 && indexofcurrentmax <= n/3-1)
	{
		cout << 0 << endl;
	}
	else if (indexofcurrentmax >= n/3 && indexofcurrentmax <= n/3*2-1)
	{
		cout << 1 << endl;
	}
	else
	{
		cout << 2 << endl;
	}
}

void Homework5_3()
//3. Дан массив размера n, заполненный слуайными числами из диапазона[0, n).Легче объяснить на примере :
//Например сгенерировался такой массив(n = 10) : 4 3 8 6 1 2 0 2 4 3. Надо прыгать по элементам и выводить их на экран.
//Прыгать так : сначала берем нулевой элемент, это 4, выводим 4 на экран.
//Далее берем элемент с индексом 4, это 1, выводим 1 на экран.
//Далее берем элемент с инлексом 1, там 3, выводим 3. Далее берем элемент с индексом 3 и т.д.
{
	const int n = 10;
	int a[n];
	int currentindex = 0;
	int numberofcurrentindex = 0;
	int nextindex = 0;
	int nextnumberofnextindex = 0;

	for (int i = 0; i < n; i++)
	{
		a[i] = rand() % n; //заполнить массив случайными числами
	}
	for (int i = 0; i < n; i++)
	{
		cout << a[i] << ' '; //вывести массив на экран
	}
	cout << endl;

		//currentindex = 0;
		//numberofcurrentindex = a[0];
		//cout << "Index - " << currentindex << ' ';
		//cout << "Number - " << numberofcurrentindex << endl;

	for (int i = 1; i < n; i++)
	{
		nextindex = numberofcurrentindex;
		//nextnumberofnextindex = a[nextindex];
		numberofcurrentindex = a[nextindex];
		cout << "Index - " << nextindex << ' ';
		cout << "Number - " << numberofcurrentindex << endl;
	}
}

void Homework5_4()
//4. Дан массив размера n.Заполнить его слуайными числами [-10, 10] таким образом : 
//30 % что число будет отрицательным, 70 % что положительным.
//Будут вопросы по заданию, пиши.

//int random_number = rand() % 100;
//if (random_number < 30)
//{
//	cout << 1;
//}
//else
//{
//	cout << 2;
//}

//std::cout << (rand() % 100 < 30 ? 1 : 2) << endl;
//std::cout << (rand() % 3 < 1 ? 1 : 2) << endl;

//На самом деле задача про массив не совсем корректная, наверно мне надо перефразировать ее так :
//При генерации очередного числа : 30 % что это будет случайное число из диапазон[-10, -1]. 70 % что из диапазона[0, 10]

//При генерации очередного числа : 30 % что это будет случайное число из диапазон[-10, -1]. 70 % что из диапазона[0, 10]
//Вот это, уточнение условия.Надо делать так!

{
	const int n = 10;
	int a[n];
	int Probability = 0;
	int RandomNumber = 0;

	for (int i = 0; i < n; i++)
	{
		Probability = rand() % 100;

		if (Probability < (30-1))
		{
			RandomNumber = rand() % 10 + (-10);
		}
		else
		{
			RandomNumber = rand() % 11;
		}
		cout << RandomNumber << ' ';
		
		a[i] = RandomNumber; //заполняем текущий индекс массива при условии отрицательного числа
	}
	
	cout << endl;
	
	for (int i = 0; i < n; i++)
	{
		cout << a[i] << ' '; //вывести массив на экран
	}
	cout << endl;

}

void Homework5_5()
//5. Дан массив размера n, заполнить его таким образом : в нулевой ячейке случайноке число от[0, 10].В первой[5, 15].
//Во второй[10, 20] и т.д.
//Вывести true, если массив отсортирован.
{
	const int n = 10;
	int a[n];
	int step = 5;
	int CurrentUpperLimit = 11;
	int CounterOfGrowth = 0;

	for (int i = 0; i < n; i++)
	{
		a[i] = rand() % CurrentUpperLimit + i*step;
	}

	for (int i = 0; i < n; i++)
	{
		cout << a[i] << ' '; //вывести массив на экран
	}
	cout << endl;

	for (int i = 0; i < n; i++)
	{
		if (a[i] <= a[i+1])
		{
			CounterOfGrowth++;
			//cout << CounterOfGrowth << endl;
		}
	}
	if (CounterOfGrowth == n-1)
	{
		cout << "true";
	}

}

#pragma endregion

#pragma region Classwork_6_Arrays
void Classwork6_1()
{
	const int n = 10;
	int a[n];
	int IsArrayUnique = 1;

	for (int i = 0; i < n; i++)
	{
		a[i] = rand() % 10;
	}

	for (int i = 0; i < n; i++)
	{
		//cout << a[i] << ' '; //вывести массив на экран
	}
	cout << endl;
	

	// 19 11 8 24 22 14 23 14 19 25

	for (int i = 0; i < n; i++)
	{
		//std::cout << i << std::endl;
		
		for (int j = i+1; j < n; j++)
		{
			if (i != j && a[i] == a[j])
			{
				IsArrayUnique = 0;
				break;
			}
		}

		if (IsArrayUnique == 0)
		{
			break;
		}
	}

	assert(IsArrayUnique == 0 || IsArrayUnique == 1); //проверка на то, что переменная принимает ТОЛЬКО заданные значения в скобках, иначе программа крашится. В скобках проверяется выражение TRUE

	cout << IsArrayUnique << endl;
}

void Classwork6_2()
{
	const int n = 10;
	const int max_value = 20;
	int a[n];
	int b[max_value] = { 0 };
	int IsArrayUnique = 1;

	int count = 0;

	for (int i = 0; i < n; i++)
	{
		a[i] = rand() % max_value;
	}

	for (int i = 0; i < n; i++)
	{
		cout << a[i] << ' '; //вывести массив на экран
	}
	cout << endl;

	for (int i = 0; i < n; i++)
	{
		b[a[i]] += 1;
	}
	for (int i = 0; i < max_value; i++)
	{
		if (b[i] > 1)
		{
			IsArrayUnique = 0;
		}
	}
	
	assert(IsArrayUnique == 0 || IsArrayUnique == 1); //проверка на то, что переменная принимает ТОЛЬКО заданные значения в скобках, иначе программа крашится. В скобках проверяется выражение TRUE

	cout << IsArrayUnique << endl;
}

void Classwork6_3()
// Заполнить массив всеми картами. Колода 52 карты. 2 - 10 - числовые карты, 11 - Валет, 12 - Дама, 13 - Король, 14 - Туз.
// Колода всегда лежит рубашкой вверх, самая первая верхняя карта - это нулевой индекс в массиве a ( a[0] )
// массив карт НЕ ПЕРЕПИСЫВАЕТСЯ.
{


	/*
	b = 0 - буби
	p = 1 - пики
	k = 2 - крести
	c = 3 - червы
	
		2 - 2 + b - 2
		2 - 2 + p - 16
		2 - 2 + k - 30
		2 - 2 + c - 44
		3 - 2 + b - 3
		3 - 2 + p - 17
	*/
	//  4 p - 41  - 4  1
	// 12 c - 123 - 12 3    
	//  3 c - 33  - 3  3
	// 10 p - 101 - 10 1
	
	const int n = 52; //количество карт в колоде без джокеров
	int a[n]; //массив для сгенерированной колоды
	const int dmin = 2; //минимальное достоинство - минимальная карта в колоде двойка
	const int dmax = 14; //максимальное достоинство - при этом, с 2 до 10 это числовые карты, 11 - Валет, 12 - Дама, 13 - Король, 14 - Туз
	const int m = 4; //количество мастей в колоде (Бубны, Пики, Кресты, Червы)
	int k = 0; //индекс массива а для заполнения его картами
	int peremesh = 10000; //количество раз перемешиваний колоды (10000 * 52)
	int PervayaKartaDlyaPeremesh = 0; //индекс какой-то карты в колоде для обмена значением с другой картой
	int VtorayaKartaDlyaPeremesh = 0; //индекс какой-то другой карты для обмена значением с первой-попавшейся картой
	int ObmennayaPeremennaya = 0;//временная переменная для обмена значений карт

	for (int i = dmin; i <= dmax; i++) //цикл для заполнения массива - колодой карт, в части - достоинств
	{
		for (int j = 0; j < m; j++) //цикл для заполнения массива карт с заполненными достоинствами - мастями
		{
			a[k] = i * 10 + j; //присвоение текущей карте значений достоинств и мастей
			k++; //переход к следующей карте путём перехода к следующему индексу массива
		}
	}

	for (int i = 0; i <= peremesh; i++)//цикл для заполнения массива - колоды карт
	{
		PervayaKartaDlyaPeremesh = rand() % 52; //берём наугад индекс какой-то рандомной карты 
		VtorayaKartaDlyaPeremesh = rand() % 52; //берём наугад индекс какой-то другой карты
		ObmennayaPeremennaya = a[PervayaKartaDlyaPeremesh];//присваиваем временной переменной значение из массива-колоды, соответствующее индексу, подобранному рандомно
		a[PervayaKartaDlyaPeremesh] = a[VtorayaKartaDlyaPeremesh];//присваиваем значению первой рандомной карты в массиве-колоде - значение другой рандомно-выбранной карты
		a[VtorayaKartaDlyaPeremesh] = ObmennayaPeremennaya;//присваиваем значению второй рандомно-подобранной карты - значение из временной переменной, куда мы положили значение первой карты до обмена
	}
	
	char masti[] = { 'b', 'p', 't' ,'c' };
	//создаём массив символов-мастей [0,3], означающий масти карт - для вывода на экран читабельных значений карт
	char dostoinstva[] = {'2', '3', '4' ,'5','6','7','8','9','Z','J','Q','K','A' }; 
	//создаём массив символов-достоинств [0,12] - для вывода на экран читабельных значений карт, при этом! 
	//Так как используем функцию char, которая оперирует только одним символом, необходимо для достоинства 10 прописать исключение!
	
	/*const char* dostoinstva[] = { "2", "3", "4" ,"5","6","7","8","9","10","J","Q","K","A"}; 
	это вариант использования функции char для строки (string, не line), т.е. это не про целую строку отведённую в выводе под эти символы*/

	for (int i = 0; i < n; i++) //запускаем цикл для вывода на экран необходимого по условию задачи набора данных
	{
		if (a[i] / 10 == 10) //прописываем исключение для вывода достоинства карты 10, т.к. char оперирует только одним символом
		{
			cout << 10 << ' ' << masti[a[i] % 10] << endl; //выводим char-овские массивы на экран (при условии что среди карт попалась 10)
		}
		else
		{
		cout << dostoinstva[a[i] / 10 - 2] << ' ' << masti[a[i] % 10] << endl; //выводим char-овские массивы на экран (при условии что не попалась 10), при этом:
	//минус 2 добавлено для того, чтобы не выходить за границы чаровского массива. При этом, работает это так:
	//если [a[i] / 10 даёт номинал карты 2, то если не написать -2 он обратится ко второму индексу (3 ячейка) массива, т.е. 4
	//а если будет туз - 14 - он выйдет за границы чаровского массива.
		}
	}
	cout << endl;

	//задание: взять верхние 10 карт и проссумировать их достоинство
	
	int SummaKart = 0;

	for (int i = 0; i < 10; i++)
	{
		SummaKart += a[i] / 10;
	}
	cout << SummaKart << endl;

}

#pragma endregion

// ========================================================================= //
//1. Вывести true если в верхних 10 картах есть туз.
//2. Взять с верха колоды две карты, вывести большую из них по достоинству.Если карты равны, ничего не выводить.
//Например: 4p  4k - ничего не выводить. 9b 5k - вывести 9 бубей.
//
//3. Пользователь вводит козырь.Взять с колоды случайные 2 карты и вывести большую из них с учетом козыря.
//Т.е.козырная карта всегда больше не козырной карты.Если карты равны - ничего не выводить.
//Например, козырь пики : 5p 9k - вывод 5p.
//
//4. Найти в колоде позицию туза червей.
//
//5. Среди верхних 10 карт найти максимальное достоинство.Т.е.например последние 10 карт это
//4p 7k 10b 4k jb jp 5k 2c 7b 8k.Тут максимальное достоинство - валет, вот вальта и вывести.
//
//6. Выводить карты с колоды, пока не встретится дама.
// ========================================================================= //


void SizeAndSizeOf()
{
	cout << sizeof(int) << endl; // Сколько байт выделено под переменную типа int, конкретно в текущей архитектуре и при текущем компиляторе
	cout << sizeof(char) << endl;

	char a = 140; // 128

	double d = 344444;

	cout << sizeof(d) << endl; // Сколько байт выделено под переменную  d, конкретно в текущей архитектуре и при текущем компиляторе
	cout << sizeof(double) << endl;

	int arr[10];

	cout << sizeof(arr) / sizeof(int) << endl;

	cout << size(arr) << endl;
	
	int aa = 0;
}

void ToHIghrerTest()
{
	cout << (char)toupper(1) << endl;
	cout << (char)toupper('1') << endl;
	cout << (char)toupper('A') << endl;
	cout << (char)toupper('a') << endl;


	int a = 0;
}

#pragma endregion Homework

int main()
{
	//SizeAndSizeOf();
	//ToHIghrerTest();

	setlocale(LC_ALL, "Russian");
	srand(time(0)); 
	// Задает стартовое значение для rand (seed)

	//Homework1();	
	//Homework2();	
	//Homework2_1();	
	//Homework3();	
	//Homework4();	
	//Homework5();	
	//Homework6();	
	//Homework7();	
	//Homework8();
	//Homework9();
	//Homework10();
	//Homework11();
	//Classwork_1_0();
	//Homework_1_1();
	//Homework_1_2();
	//Homework_1_3();
	//Homework_1_4();
	//Homework_1_5();
	//Homework_1_6();
	//Homework_1_7();
	//Homework_1_8_1();
	//Homework_1_8_2();
	//Homework_1_8_3();
	//Homework_1_8_4();
	//Homework_1_8_5();
	//Homework_1_8_6();
	//Homework_1_8_7();
	//Homework_1_8_8();
	//IsuchaemWhile();
	//IsuchaemWhile1();
	//Homework_2_1();
	//Homework_2_2_1();
	//Homework_2_2_2();
	//Homework_2_3();
	//Homework_2_4();
	//Homework_2_5();
	//Homework_2_6();
	//Homework_2_7();
	//Homework_2_8();
	//Homework_2_8_1();
	//Homework_2_9();
	//Homework_2_9_1();
	//Homework_2_9_2();
	//Homework_2_10();
	//Homework_2_11();
	//Homework_2_12();
	//Homework_2_13();
	//Homework_2_14();
	//Homework_2_15();
	//IsuchaemMassivy();
	//IsuchaemMassivy_1();
	//IsuchaemMassivy_2();
	//IsuchaemMassivy_3();
	//IsuchaemMassivy_4();
	//IsuchaemMassivy_5();
	//IsuchaemMassivy_6();
	//IsuchaemMassivy_7();
	//IsuchaemMassivy_8();
	//IsuchaemMassivy_9();
	//IsuchaemMassivy_10();
	//IsuchaemMassivy_11();
	//IsuchaemMassivy_12();
	//IsuchaemMassivy_13();
	//IsuchaemMassivy_14();
	//IsuchaemMassivy_15();
	//IsuchaemMassivy_16();
	//IsuchaemMassivy_17();
	//IsuchaemMassivy_18();
	//IsuchaemMassivy_19();
	//Homework3_4();
	//Homework3_5();
	//Homework3_6();
	//Homework3_7();
	//Homework3_8();
	//Homework3_9();
	//Homework3_10();
	//IsuchaemMassivy_4_1();
	//IsuchaemMassivy_4_2();
	//IsuchaemMassivy_4_3();
	//IsuchaemMassivy_4_4();
	//Homework3_11();
	//Homework3_12();
	//Homework3_13();
	//Homework3_14();
	//Homework3_15();
	//Homework3_16();
	//Homework3_17();
	//Homework3_18();
	//Homework3_19();
	//Classwork5_1();
	////Classwork5_2();
	////for (int i = 0; i < 10; i++)
	////{
	////Classwork5_3();
	////}
	//Classwork5_4();
	//Classwork5_5();
	//Classwork5_6();
	//Homework5_1();
	//Homework5_2();
	//Homework5_3();
	//Homework5_4();
	//Homework5_5();

	//Classwork6_1();
	//Classwork6_2();
	//Classwork6_3();
	//Homework6_1();
	//Homework6_2();
	//Homework6_3();
	//Homework6_4();
	//Classwork7_1();
	//players_card_generation_with_index();
	//Homework6_5();
	//Homework6_6();
	//Homework6_7();
	//Homework6_8();
	//Homework6_9();
	//array_generation();
	//array_generation_2d();
	//generate_unit_matrix();
	//generate_triangle_matrix();
	//array_generation_2d_2();
	//cards_array_generation_2d();
	//if_number_is_prime(19);
	//print_all_numbers_below_prime(19);
	//print_n_prime_numbers_from_2(7);
	//print_prime_number_after_n(5);
	//print_prime_number_after_n(11, 4);
	//print_numbers_between_n_p(-5, -10);
	//print_random_numbers_between_a_b(-5, -10);
	//return_random_true_false(45);
	//print_p_prob_of_a_else_b(5, 7, 45);
	//generate_rand_1_0();
	//summ_of_array_halfs(arr, n);
	//average_number_of_array(arr, n);
	//print_first_p_below_zero_elements_of_array(arr, n, 6);

	//const int n = 10;
	//int arr[n] = { 0,1,0,1,0,2,0,1,0,1, };
	//true_if_only_2_unic_numbers_in_arr(arr, n);

	//const int n = 10;
	//int arr[n] = { 0,2,4,5,4,3,2,2,9,1, };
	//index_of_max_element_of_array(arr, n);

	//const int n =8;
	//int arr[n] = { 1,2,3,4,4,3,2,1, };
	//true_if_arr_mirror(arr, n);


	//Console.Print(3, 4, '*');
	//Console.Print(3, 4, '*', Color::Green);

	//ConsoleTask(5,6,17,9);
	//ConsoleTask(10,9,4);
	//ConsoleTask();
	//TestCharMatrix();
	//ClassworkTask();
	//cards_generation_diff();

	//const int n = 100;
	//int arr[n];
	//for (int i = 0; i < n; i++)
	//{
	//	int data = rand() % 10;
	//	
	//	arr_sort_add(arr, i, data);
	//}
	//
	//for (int i = 0; i < n; i++)
	//{
	//	cout << arr[i] << ' ';
	//}
	//cout << endl;


	// 4 

	//const int n = 8;
	//int arr[n] = { 1,3,4,4,6,7,7, 0};
	//arr_sort_add(arr, n-1, 5);
	
	//summ_of_up_right_and_down_left_elems_of_matrix();


	//DynamicArrayLobby();
	matrix_generation();
}